//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The joule, symbol J, is a derived unit of energy, work, or amount of heat in the International System of Units. It is equal to the energy transferred (or work done) when applying a force of one newton through a distance of one metre (1 newton metre or NÂ·m), or in passing an electric current of one ampere through a resistance of one ohm for one second. Many other units of energy are included. Please do not confuse this definition of the calorie with the one colloquially used by the food industry, the large calorie, which is equivalent to 1 kcal. Thermochemical definition of the calorie is used. For BTU, the IT definition is used.
    /// </summary>
    public struct  Energy
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly EnergyUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public EnergyUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Energy(double value, EnergyUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static EnergyUnit BaseUnit { get; } = EnergyUnit.Joule;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static Energy MaxValue { get; } = new Energy(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static Energy MinValue { get; } = new Energy(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Energy Zero { get; } = new Energy(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get Energy in BritishThermalUnits.
        /// </summary>
        public double BritishThermalUnits => As(EnergyUnit.BritishThermalUnit);

        /// <summary>
        ///     Get Energy in Calories.
        /// </summary>
        public double Calories => As(EnergyUnit.Calorie);

        /// <summary>
        ///     Get Energy in DecathermsEc.
        /// </summary>
        public double DecathermsEc => As(EnergyUnit.DecathermEc);

        /// <summary>
        ///     Get Energy in DecathermsImperial.
        /// </summary>
        public double DecathermsImperial => As(EnergyUnit.DecathermImperial);

        /// <summary>
        ///     Get Energy in DecathermsUs.
        /// </summary>
        public double DecathermsUs => As(EnergyUnit.DecathermUs);

        /// <summary>
        ///     Get Energy in ElectronVolts.
        /// </summary>
        public double ElectronVolts => As(EnergyUnit.ElectronVolt);

        /// <summary>
        ///     Get Energy in Ergs.
        /// </summary>
        public double Ergs => As(EnergyUnit.Erg);

        /// <summary>
        ///     Get Energy in FootPounds.
        /// </summary>
        public double FootPounds => As(EnergyUnit.FootPound);

        /// <summary>
        ///     Get Energy in GigabritishThermalUnits.
        /// </summary>
        public double GigabritishThermalUnits => As(EnergyUnit.GigabritishThermalUnit);

        /// <summary>
        ///     Get Energy in GigaelectronVolts.
        /// </summary>
        public double GigaelectronVolts => As(EnergyUnit.GigaelectronVolt);

        /// <summary>
        ///     Get Energy in Gigajoules.
        /// </summary>
        public double Gigajoules => As(EnergyUnit.Gigajoule);

        /// <summary>
        ///     Get Energy in GigawattDays.
        /// </summary>
        public double GigawattDays => As(EnergyUnit.GigawattDay);

        /// <summary>
        ///     Get Energy in GigawattHours.
        /// </summary>
        public double GigawattHours => As(EnergyUnit.GigawattHour);

        /// <summary>
        ///     Get Energy in HorsepowerHours.
        /// </summary>
        public double HorsepowerHours => As(EnergyUnit.HorsepowerHour);

        /// <summary>
        ///     Get Energy in Joules.
        /// </summary>
        public double Joules => As(EnergyUnit.Joule);

        /// <summary>
        ///     Get Energy in KilobritishThermalUnits.
        /// </summary>
        public double KilobritishThermalUnits => As(EnergyUnit.KilobritishThermalUnit);

        /// <summary>
        ///     Get Energy in Kilocalories.
        /// </summary>
        public double Kilocalories => As(EnergyUnit.Kilocalorie);

        /// <summary>
        ///     Get Energy in KiloelectronVolts.
        /// </summary>
        public double KiloelectronVolts => As(EnergyUnit.KiloelectronVolt);

        /// <summary>
        ///     Get Energy in Kilojoules.
        /// </summary>
        public double Kilojoules => As(EnergyUnit.Kilojoule);

        /// <summary>
        ///     Get Energy in KilowattDays.
        /// </summary>
        public double KilowattDays => As(EnergyUnit.KilowattDay);

        /// <summary>
        ///     Get Energy in KilowattHours.
        /// </summary>
        public double KilowattHours => As(EnergyUnit.KilowattHour);

        /// <summary>
        ///     Get Energy in MegabritishThermalUnits.
        /// </summary>
        public double MegabritishThermalUnits => As(EnergyUnit.MegabritishThermalUnit);

        /// <summary>
        ///     Get Energy in Megacalories.
        /// </summary>
        public double Megacalories => As(EnergyUnit.Megacalorie);

        /// <summary>
        ///     Get Energy in MegaelectronVolts.
        /// </summary>
        public double MegaelectronVolts => As(EnergyUnit.MegaelectronVolt);

        /// <summary>
        ///     Get Energy in Megajoules.
        /// </summary>
        public double Megajoules => As(EnergyUnit.Megajoule);

        /// <summary>
        ///     Get Energy in MegawattDays.
        /// </summary>
        public double MegawattDays => As(EnergyUnit.MegawattDay);

        /// <summary>
        ///     Get Energy in MegawattHours.
        /// </summary>
        public double MegawattHours => As(EnergyUnit.MegawattHour);

        /// <summary>
        ///     Get Energy in Millijoules.
        /// </summary>
        public double Millijoules => As(EnergyUnit.Millijoule);

        /// <summary>
        ///     Get Energy in TeraelectronVolts.
        /// </summary>
        public double TeraelectronVolts => As(EnergyUnit.TeraelectronVolt);

        /// <summary>
        ///     Get Energy in TerawattDays.
        /// </summary>
        public double TerawattDays => As(EnergyUnit.TerawattDay);

        /// <summary>
        ///     Get Energy in TerawattHours.
        /// </summary>
        public double TerawattHours => As(EnergyUnit.TerawattHour);

        /// <summary>
        ///     Get Energy in ThermsEc.
        /// </summary>
        public double ThermsEc => As(EnergyUnit.ThermEc);

        /// <summary>
        ///     Get Energy in ThermsImperial.
        /// </summary>
        public double ThermsImperial => As(EnergyUnit.ThermImperial);

        /// <summary>
        ///     Get Energy in ThermsUs.
        /// </summary>
        public double ThermsUs => As(EnergyUnit.ThermUs);

        /// <summary>
        ///     Get Energy in WattDays.
        /// </summary>
        public double WattDays => As(EnergyUnit.WattDay);

        /// <summary>
        ///     Get Energy in WattHours.
        /// </summary>
        public double WattHours => As(EnergyUnit.WattHour);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Energy from BritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromBritishThermalUnits(double britishthermalunits) => new Energy(britishthermalunits, EnergyUnit.BritishThermalUnit);

        /// <summary>
        ///     Get Energy from Calories.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromCalories(double calories) => new Energy(calories, EnergyUnit.Calorie);

        /// <summary>
        ///     Get Energy from DecathermsEc.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromDecathermsEc(double decathermsec) => new Energy(decathermsec, EnergyUnit.DecathermEc);

        /// <summary>
        ///     Get Energy from DecathermsImperial.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromDecathermsImperial(double decathermsimperial) => new Energy(decathermsimperial, EnergyUnit.DecathermImperial);

        /// <summary>
        ///     Get Energy from DecathermsUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromDecathermsUs(double decathermsus) => new Energy(decathermsus, EnergyUnit.DecathermUs);

        /// <summary>
        ///     Get Energy from ElectronVolts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromElectronVolts(double electronvolts) => new Energy(electronvolts, EnergyUnit.ElectronVolt);

        /// <summary>
        ///     Get Energy from Ergs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromErgs(double ergs) => new Energy(ergs, EnergyUnit.Erg);

        /// <summary>
        ///     Get Energy from FootPounds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromFootPounds(double footpounds) => new Energy(footpounds, EnergyUnit.FootPound);

        /// <summary>
        ///     Get Energy from GigabritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigabritishThermalUnits(double gigabritishthermalunits) => new Energy(gigabritishthermalunits, EnergyUnit.GigabritishThermalUnit);

        /// <summary>
        ///     Get Energy from GigaelectronVolts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigaelectronVolts(double gigaelectronvolts) => new Energy(gigaelectronvolts, EnergyUnit.GigaelectronVolt);

        /// <summary>
        ///     Get Energy from Gigajoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigajoules(double gigajoules) => new Energy(gigajoules, EnergyUnit.Gigajoule);

        /// <summary>
        ///     Get Energy from GigawattDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigawattDays(double gigawattdays) => new Energy(gigawattdays, EnergyUnit.GigawattDay);

        /// <summary>
        ///     Get Energy from GigawattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigawattHours(double gigawatthours) => new Energy(gigawatthours, EnergyUnit.GigawattHour);

        /// <summary>
        ///     Get Energy from HorsepowerHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromHorsepowerHours(double horsepowerhours) => new Energy(horsepowerhours, EnergyUnit.HorsepowerHour);

        /// <summary>
        ///     Get Energy from Joules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromJoules(double joules) => new Energy(joules, EnergyUnit.Joule);

        /// <summary>
        ///     Get Energy from KilobritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilobritishThermalUnits(double kilobritishthermalunits) => new Energy(kilobritishthermalunits, EnergyUnit.KilobritishThermalUnit);

        /// <summary>
        ///     Get Energy from Kilocalories.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilocalories(double kilocalories) => new Energy(kilocalories, EnergyUnit.Kilocalorie);

        /// <summary>
        ///     Get Energy from KiloelectronVolts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKiloelectronVolts(double kiloelectronvolts) => new Energy(kiloelectronvolts, EnergyUnit.KiloelectronVolt);

        /// <summary>
        ///     Get Energy from Kilojoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilojoules(double kilojoules) => new Energy(kilojoules, EnergyUnit.Kilojoule);

        /// <summary>
        ///     Get Energy from KilowattDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilowattDays(double kilowattdays) => new Energy(kilowattdays, EnergyUnit.KilowattDay);

        /// <summary>
        ///     Get Energy from KilowattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilowattHours(double kilowatthours) => new Energy(kilowatthours, EnergyUnit.KilowattHour);

        /// <summary>
        ///     Get Energy from MegabritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegabritishThermalUnits(double megabritishthermalunits) => new Energy(megabritishthermalunits, EnergyUnit.MegabritishThermalUnit);

        /// <summary>
        ///     Get Energy from Megacalories.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegacalories(double megacalories) => new Energy(megacalories, EnergyUnit.Megacalorie);

        /// <summary>
        ///     Get Energy from MegaelectronVolts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegaelectronVolts(double megaelectronvolts) => new Energy(megaelectronvolts, EnergyUnit.MegaelectronVolt);

        /// <summary>
        ///     Get Energy from Megajoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegajoules(double megajoules) => new Energy(megajoules, EnergyUnit.Megajoule);

        /// <summary>
        ///     Get Energy from MegawattDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegawattDays(double megawattdays) => new Energy(megawattdays, EnergyUnit.MegawattDay);

        /// <summary>
        ///     Get Energy from MegawattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegawattHours(double megawatthours) => new Energy(megawatthours, EnergyUnit.MegawattHour);

        /// <summary>
        ///     Get Energy from Millijoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMillijoules(double millijoules) => new Energy(millijoules, EnergyUnit.Millijoule);

        /// <summary>
        ///     Get Energy from TeraelectronVolts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromTeraelectronVolts(double teraelectronvolts) => new Energy(teraelectronvolts, EnergyUnit.TeraelectronVolt);

        /// <summary>
        ///     Get Energy from TerawattDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromTerawattDays(double terawattdays) => new Energy(terawattdays, EnergyUnit.TerawattDay);

        /// <summary>
        ///     Get Energy from TerawattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromTerawattHours(double terawatthours) => new Energy(terawatthours, EnergyUnit.TerawattHour);

        /// <summary>
        ///     Get Energy from ThermsEc.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromThermsEc(double thermsec) => new Energy(thermsec, EnergyUnit.ThermEc);

        /// <summary>
        ///     Get Energy from ThermsImperial.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromThermsImperial(double thermsimperial) => new Energy(thermsimperial, EnergyUnit.ThermImperial);

        /// <summary>
        ///     Get Energy from ThermsUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromThermsUs(double thermsus) => new Energy(thermsus, EnergyUnit.ThermUs);

        /// <summary>
        ///     Get Energy from WattDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromWattDays(double wattdays) => new Energy(wattdays, EnergyUnit.WattDay);

        /// <summary>
        ///     Get Energy from WattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromWattHours(double watthours) => new Energy(watthours, EnergyUnit.WattHour);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="EnergyUnit" /> to <see cref="Energy" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Energy unit value.</returns>
        public static Energy From(double value, EnergyUnit fromUnit)
        {
            return new Energy(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(EnergyUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public Energy ToUnit(EnergyUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new Energy(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case EnergyUnit.BritishThermalUnit: return _value*1055.05585262;
                case EnergyUnit.Calorie: return _value*4.184;
                case EnergyUnit.DecathermEc: return (_value*1.05505585262e8) * 1e1d;
                case EnergyUnit.DecathermImperial: return (_value*1.05505585257348e8) * 1e1d;
                case EnergyUnit.DecathermUs: return (_value*1.054804e8) * 1e1d;
                case EnergyUnit.ElectronVolt: return _value*1.602176565e-19;
                case EnergyUnit.Erg: return _value*1e-7;
                case EnergyUnit.FootPound: return _value*1.355817948;
                case EnergyUnit.GigabritishThermalUnit: return (_value*1055.05585262) * 1e9d;
                case EnergyUnit.GigaelectronVolt: return (_value*1.602176565e-19) * 1e9d;
                case EnergyUnit.Gigajoule: return (_value) * 1e9d;
                case EnergyUnit.GigawattDay: return (_value*24*3600d) * 1e9d;
                case EnergyUnit.GigawattHour: return (_value*3600d) * 1e9d;
                case EnergyUnit.HorsepowerHour: return _value*2.6845195377e6;
                case EnergyUnit.Joule: return _value;
                case EnergyUnit.KilobritishThermalUnit: return (_value*1055.05585262) * 1e3d;
                case EnergyUnit.Kilocalorie: return (_value*4.184) * 1e3d;
                case EnergyUnit.KiloelectronVolt: return (_value*1.602176565e-19) * 1e3d;
                case EnergyUnit.Kilojoule: return (_value) * 1e3d;
                case EnergyUnit.KilowattDay: return (_value*24*3600d) * 1e3d;
                case EnergyUnit.KilowattHour: return (_value*3600d) * 1e3d;
                case EnergyUnit.MegabritishThermalUnit: return (_value*1055.05585262) * 1e6d;
                case EnergyUnit.Megacalorie: return (_value*4.184) * 1e6d;
                case EnergyUnit.MegaelectronVolt: return (_value*1.602176565e-19) * 1e6d;
                case EnergyUnit.Megajoule: return (_value) * 1e6d;
                case EnergyUnit.MegawattDay: return (_value*24*3600d) * 1e6d;
                case EnergyUnit.MegawattHour: return (_value*3600d) * 1e6d;
                case EnergyUnit.Millijoule: return (_value) * 1e-3d;
                case EnergyUnit.TeraelectronVolt: return (_value*1.602176565e-19) * 1e12d;
                case EnergyUnit.TerawattDay: return (_value*24*3600d) * 1e12d;
                case EnergyUnit.TerawattHour: return (_value*3600d) * 1e12d;
                case EnergyUnit.ThermEc: return _value*1.05505585262e8;
                case EnergyUnit.ThermImperial: return _value*1.05505585257348e8;
                case EnergyUnit.ThermUs: return _value*1.054804e8;
                case EnergyUnit.WattDay: return _value*24*3600d;
                case EnergyUnit.WattHour: return _value*3600d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(EnergyUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case EnergyUnit.BritishThermalUnit: return baseUnitValue/1055.05585262;
                case EnergyUnit.Calorie: return baseUnitValue/4.184;
                case EnergyUnit.DecathermEc: return (baseUnitValue/1.05505585262e8) / 1e1d;
                case EnergyUnit.DecathermImperial: return (baseUnitValue/1.05505585257348e8) / 1e1d;
                case EnergyUnit.DecathermUs: return (baseUnitValue/1.054804e8) / 1e1d;
                case EnergyUnit.ElectronVolt: return baseUnitValue/1.602176565e-19;
                case EnergyUnit.Erg: return baseUnitValue/1e-7;
                case EnergyUnit.FootPound: return baseUnitValue/1.355817948;
                case EnergyUnit.GigabritishThermalUnit: return (baseUnitValue/1055.05585262) / 1e9d;
                case EnergyUnit.GigaelectronVolt: return (baseUnitValue/1.602176565e-19) / 1e9d;
                case EnergyUnit.Gigajoule: return (baseUnitValue) / 1e9d;
                case EnergyUnit.GigawattDay: return (baseUnitValue/(24*3600d)) / 1e9d;
                case EnergyUnit.GigawattHour: return (baseUnitValue/3600d) / 1e9d;
                case EnergyUnit.HorsepowerHour: return baseUnitValue/2.6845195377e6;
                case EnergyUnit.Joule: return baseUnitValue;
                case EnergyUnit.KilobritishThermalUnit: return (baseUnitValue/1055.05585262) / 1e3d;
                case EnergyUnit.Kilocalorie: return (baseUnitValue/4.184) / 1e3d;
                case EnergyUnit.KiloelectronVolt: return (baseUnitValue/1.602176565e-19) / 1e3d;
                case EnergyUnit.Kilojoule: return (baseUnitValue) / 1e3d;
                case EnergyUnit.KilowattDay: return (baseUnitValue/(24*3600d)) / 1e3d;
                case EnergyUnit.KilowattHour: return (baseUnitValue/3600d) / 1e3d;
                case EnergyUnit.MegabritishThermalUnit: return (baseUnitValue/1055.05585262) / 1e6d;
                case EnergyUnit.Megacalorie: return (baseUnitValue/4.184) / 1e6d;
                case EnergyUnit.MegaelectronVolt: return (baseUnitValue/1.602176565e-19) / 1e6d;
                case EnergyUnit.Megajoule: return (baseUnitValue) / 1e6d;
                case EnergyUnit.MegawattDay: return (baseUnitValue/(24*3600d)) / 1e6d;
                case EnergyUnit.MegawattHour: return (baseUnitValue/3600d) / 1e6d;
                case EnergyUnit.Millijoule: return (baseUnitValue) / 1e-3d;
                case EnergyUnit.TeraelectronVolt: return (baseUnitValue/1.602176565e-19) / 1e12d;
                case EnergyUnit.TerawattDay: return (baseUnitValue/(24*3600d)) / 1e12d;
                case EnergyUnit.TerawattHour: return (baseUnitValue/3600d) / 1e12d;
                case EnergyUnit.ThermEc: return baseUnitValue/1.05505585262e8;
                case EnergyUnit.ThermImperial: return baseUnitValue/1.05505585257348e8;
                case EnergyUnit.ThermUs: return baseUnitValue/1.054804e8;
                case EnergyUnit.WattDay: return baseUnitValue/(24*3600d);
                case EnergyUnit.WattHour: return baseUnitValue/3600d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

