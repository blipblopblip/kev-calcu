//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In chemistry, the mass concentration ρi (or γi) is defined as the mass of a constituent mi divided by the volume of the mixture V
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Mass_concentration_(chemistry)
    /// </remarks>
    public struct  MassConcentration
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly MassConcentrationUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public MassConcentrationUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public MassConcentration(double value, MassConcentrationUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static MassConcentrationUnit BaseUnit { get; } = MassConcentrationUnit.KilogramPerCubicMeter;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static MassConcentration MaxValue { get; } = new MassConcentration(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static MassConcentration MinValue { get; } = new MassConcentration(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static MassConcentration Zero { get; } = new MassConcentration(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get MassConcentration in CentigramsPerDeciliter.
        /// </summary>
        public double CentigramsPerDeciliter => As(MassConcentrationUnit.CentigramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration in CentigramsPerLiter.
        /// </summary>
        public double CentigramsPerLiter => As(MassConcentrationUnit.CentigramPerLiter);

        /// <summary>
        ///     Get MassConcentration in CentigramsPerMicroliter.
        /// </summary>
        public double CentigramsPerMicroliter => As(MassConcentrationUnit.CentigramPerMicroliter);

        /// <summary>
        ///     Get MassConcentration in CentigramsPerMilliliter.
        /// </summary>
        public double CentigramsPerMilliliter => As(MassConcentrationUnit.CentigramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration in DecigramsPerDeciliter.
        /// </summary>
        public double DecigramsPerDeciliter => As(MassConcentrationUnit.DecigramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration in DecigramsPerLiter.
        /// </summary>
        public double DecigramsPerLiter => As(MassConcentrationUnit.DecigramPerLiter);

        /// <summary>
        ///     Get MassConcentration in DecigramsPerMicroliter.
        /// </summary>
        public double DecigramsPerMicroliter => As(MassConcentrationUnit.DecigramPerMicroliter);

        /// <summary>
        ///     Get MassConcentration in DecigramsPerMilliliter.
        /// </summary>
        public double DecigramsPerMilliliter => As(MassConcentrationUnit.DecigramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration in GramsPerCubicCentimeter.
        /// </summary>
        public double GramsPerCubicCentimeter => As(MassConcentrationUnit.GramPerCubicCentimeter);

        /// <summary>
        ///     Get MassConcentration in GramsPerCubicMeter.
        /// </summary>
        public double GramsPerCubicMeter => As(MassConcentrationUnit.GramPerCubicMeter);

        /// <summary>
        ///     Get MassConcentration in GramsPerCubicMillimeter.
        /// </summary>
        public double GramsPerCubicMillimeter => As(MassConcentrationUnit.GramPerCubicMillimeter);

        /// <summary>
        ///     Get MassConcentration in GramsPerDeciliter.
        /// </summary>
        public double GramsPerDeciliter => As(MassConcentrationUnit.GramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration in GramsPerLiter.
        /// </summary>
        public double GramsPerLiter => As(MassConcentrationUnit.GramPerLiter);

        /// <summary>
        ///     Get MassConcentration in GramsPerMicroliter.
        /// </summary>
        public double GramsPerMicroliter => As(MassConcentrationUnit.GramPerMicroliter);

        /// <summary>
        ///     Get MassConcentration in GramsPerMilliliter.
        /// </summary>
        public double GramsPerMilliliter => As(MassConcentrationUnit.GramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration in KilogramsPerCubicCentimeter.
        /// </summary>
        public double KilogramsPerCubicCentimeter => As(MassConcentrationUnit.KilogramPerCubicCentimeter);

        /// <summary>
        ///     Get MassConcentration in KilogramsPerCubicMeter.
        /// </summary>
        public double KilogramsPerCubicMeter => As(MassConcentrationUnit.KilogramPerCubicMeter);

        /// <summary>
        ///     Get MassConcentration in KilogramsPerCubicMillimeter.
        /// </summary>
        public double KilogramsPerCubicMillimeter => As(MassConcentrationUnit.KilogramPerCubicMillimeter);

        /// <summary>
        ///     Get MassConcentration in KilogramsPerLiter.
        /// </summary>
        public double KilogramsPerLiter => As(MassConcentrationUnit.KilogramPerLiter);

        /// <summary>
        ///     Get MassConcentration in KilopoundsPerCubicFoot.
        /// </summary>
        public double KilopoundsPerCubicFoot => As(MassConcentrationUnit.KilopoundPerCubicFoot);

        /// <summary>
        ///     Get MassConcentration in KilopoundsPerCubicInch.
        /// </summary>
        public double KilopoundsPerCubicInch => As(MassConcentrationUnit.KilopoundPerCubicInch);

        /// <summary>
        ///     Get MassConcentration in MicrogramsPerCubicMeter.
        /// </summary>
        public double MicrogramsPerCubicMeter => As(MassConcentrationUnit.MicrogramPerCubicMeter);

        /// <summary>
        ///     Get MassConcentration in MicrogramsPerDeciliter.
        /// </summary>
        public double MicrogramsPerDeciliter => As(MassConcentrationUnit.MicrogramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration in MicrogramsPerLiter.
        /// </summary>
        public double MicrogramsPerLiter => As(MassConcentrationUnit.MicrogramPerLiter);

        /// <summary>
        ///     Get MassConcentration in MicrogramsPerMicroliter.
        /// </summary>
        public double MicrogramsPerMicroliter => As(MassConcentrationUnit.MicrogramPerMicroliter);

        /// <summary>
        ///     Get MassConcentration in MicrogramsPerMilliliter.
        /// </summary>
        public double MicrogramsPerMilliliter => As(MassConcentrationUnit.MicrogramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration in MilligramsPerCubicMeter.
        /// </summary>
        public double MilligramsPerCubicMeter => As(MassConcentrationUnit.MilligramPerCubicMeter);

        /// <summary>
        ///     Get MassConcentration in MilligramsPerDeciliter.
        /// </summary>
        public double MilligramsPerDeciliter => As(MassConcentrationUnit.MilligramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration in MilligramsPerLiter.
        /// </summary>
        public double MilligramsPerLiter => As(MassConcentrationUnit.MilligramPerLiter);

        /// <summary>
        ///     Get MassConcentration in MilligramsPerMicroliter.
        /// </summary>
        public double MilligramsPerMicroliter => As(MassConcentrationUnit.MilligramPerMicroliter);

        /// <summary>
        ///     Get MassConcentration in MilligramsPerMilliliter.
        /// </summary>
        public double MilligramsPerMilliliter => As(MassConcentrationUnit.MilligramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration in NanogramsPerDeciliter.
        /// </summary>
        public double NanogramsPerDeciliter => As(MassConcentrationUnit.NanogramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration in NanogramsPerLiter.
        /// </summary>
        public double NanogramsPerLiter => As(MassConcentrationUnit.NanogramPerLiter);

        /// <summary>
        ///     Get MassConcentration in NanogramsPerMicroliter.
        /// </summary>
        public double NanogramsPerMicroliter => As(MassConcentrationUnit.NanogramPerMicroliter);

        /// <summary>
        ///     Get MassConcentration in NanogramsPerMilliliter.
        /// </summary>
        public double NanogramsPerMilliliter => As(MassConcentrationUnit.NanogramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration in PicogramsPerDeciliter.
        /// </summary>
        public double PicogramsPerDeciliter => As(MassConcentrationUnit.PicogramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration in PicogramsPerLiter.
        /// </summary>
        public double PicogramsPerLiter => As(MassConcentrationUnit.PicogramPerLiter);

        /// <summary>
        ///     Get MassConcentration in PicogramsPerMicroliter.
        /// </summary>
        public double PicogramsPerMicroliter => As(MassConcentrationUnit.PicogramPerMicroliter);

        /// <summary>
        ///     Get MassConcentration in PicogramsPerMilliliter.
        /// </summary>
        public double PicogramsPerMilliliter => As(MassConcentrationUnit.PicogramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration in PoundsPerCubicFoot.
        /// </summary>
        public double PoundsPerCubicFoot => As(MassConcentrationUnit.PoundPerCubicFoot);

        /// <summary>
        ///     Get MassConcentration in PoundsPerCubicInch.
        /// </summary>
        public double PoundsPerCubicInch => As(MassConcentrationUnit.PoundPerCubicInch);

        /// <summary>
        ///     Get MassConcentration in PoundsPerImperialGallon.
        /// </summary>
        public double PoundsPerImperialGallon => As(MassConcentrationUnit.PoundPerImperialGallon);

        /// <summary>
        ///     Get MassConcentration in PoundsPerUSGallon.
        /// </summary>
        public double PoundsPerUSGallon => As(MassConcentrationUnit.PoundPerUSGallon);

        /// <summary>
        ///     Get MassConcentration in SlugsPerCubicFoot.
        /// </summary>
        public double SlugsPerCubicFoot => As(MassConcentrationUnit.SlugPerCubicFoot);

        /// <summary>
        ///     Get MassConcentration in TonnesPerCubicCentimeter.
        /// </summary>
        public double TonnesPerCubicCentimeter => As(MassConcentrationUnit.TonnePerCubicCentimeter);

        /// <summary>
        ///     Get MassConcentration in TonnesPerCubicMeter.
        /// </summary>
        public double TonnesPerCubicMeter => As(MassConcentrationUnit.TonnePerCubicMeter);

        /// <summary>
        ///     Get MassConcentration in TonnesPerCubicMillimeter.
        /// </summary>
        public double TonnesPerCubicMillimeter => As(MassConcentrationUnit.TonnePerCubicMillimeter);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get MassConcentration from CentigramsPerDeciliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromCentigramsPerDeciliter(double centigramsperdeciliter) => new MassConcentration(centigramsperdeciliter, MassConcentrationUnit.CentigramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration from CentigramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromCentigramsPerLiter(double centigramsperliter) => new MassConcentration(centigramsperliter, MassConcentrationUnit.CentigramPerLiter);

        /// <summary>
        ///     Get MassConcentration from CentigramsPerMicroliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromCentigramsPerMicroliter(double centigramspermicroliter) => new MassConcentration(centigramspermicroliter, MassConcentrationUnit.CentigramPerMicroliter);

        /// <summary>
        ///     Get MassConcentration from CentigramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromCentigramsPerMilliliter(double centigramspermilliliter) => new MassConcentration(centigramspermilliliter, MassConcentrationUnit.CentigramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration from DecigramsPerDeciliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromDecigramsPerDeciliter(double decigramsperdeciliter) => new MassConcentration(decigramsperdeciliter, MassConcentrationUnit.DecigramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration from DecigramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromDecigramsPerLiter(double decigramsperliter) => new MassConcentration(decigramsperliter, MassConcentrationUnit.DecigramPerLiter);

        /// <summary>
        ///     Get MassConcentration from DecigramsPerMicroliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromDecigramsPerMicroliter(double decigramspermicroliter) => new MassConcentration(decigramspermicroliter, MassConcentrationUnit.DecigramPerMicroliter);

        /// <summary>
        ///     Get MassConcentration from DecigramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromDecigramsPerMilliliter(double decigramspermilliliter) => new MassConcentration(decigramspermilliliter, MassConcentrationUnit.DecigramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration from GramsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromGramsPerCubicCentimeter(double gramspercubiccentimeter) => new MassConcentration(gramspercubiccentimeter, MassConcentrationUnit.GramPerCubicCentimeter);

        /// <summary>
        ///     Get MassConcentration from GramsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromGramsPerCubicMeter(double gramspercubicmeter) => new MassConcentration(gramspercubicmeter, MassConcentrationUnit.GramPerCubicMeter);

        /// <summary>
        ///     Get MassConcentration from GramsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromGramsPerCubicMillimeter(double gramspercubicmillimeter) => new MassConcentration(gramspercubicmillimeter, MassConcentrationUnit.GramPerCubicMillimeter);

        /// <summary>
        ///     Get MassConcentration from GramsPerDeciliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromGramsPerDeciliter(double gramsperdeciliter) => new MassConcentration(gramsperdeciliter, MassConcentrationUnit.GramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration from GramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromGramsPerLiter(double gramsperliter) => new MassConcentration(gramsperliter, MassConcentrationUnit.GramPerLiter);

        /// <summary>
        ///     Get MassConcentration from GramsPerMicroliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromGramsPerMicroliter(double gramspermicroliter) => new MassConcentration(gramspermicroliter, MassConcentrationUnit.GramPerMicroliter);

        /// <summary>
        ///     Get MassConcentration from GramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromGramsPerMilliliter(double gramspermilliliter) => new MassConcentration(gramspermilliliter, MassConcentrationUnit.GramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration from KilogramsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromKilogramsPerCubicCentimeter(double kilogramspercubiccentimeter) => new MassConcentration(kilogramspercubiccentimeter, MassConcentrationUnit.KilogramPerCubicCentimeter);

        /// <summary>
        ///     Get MassConcentration from KilogramsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromKilogramsPerCubicMeter(double kilogramspercubicmeter) => new MassConcentration(kilogramspercubicmeter, MassConcentrationUnit.KilogramPerCubicMeter);

        /// <summary>
        ///     Get MassConcentration from KilogramsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromKilogramsPerCubicMillimeter(double kilogramspercubicmillimeter) => new MassConcentration(kilogramspercubicmillimeter, MassConcentrationUnit.KilogramPerCubicMillimeter);

        /// <summary>
        ///     Get MassConcentration from KilogramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromKilogramsPerLiter(double kilogramsperliter) => new MassConcentration(kilogramsperliter, MassConcentrationUnit.KilogramPerLiter);

        /// <summary>
        ///     Get MassConcentration from KilopoundsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromKilopoundsPerCubicFoot(double kilopoundspercubicfoot) => new MassConcentration(kilopoundspercubicfoot, MassConcentrationUnit.KilopoundPerCubicFoot);

        /// <summary>
        ///     Get MassConcentration from KilopoundsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromKilopoundsPerCubicInch(double kilopoundspercubicinch) => new MassConcentration(kilopoundspercubicinch, MassConcentrationUnit.KilopoundPerCubicInch);

        /// <summary>
        ///     Get MassConcentration from MicrogramsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMicrogramsPerCubicMeter(double microgramspercubicmeter) => new MassConcentration(microgramspercubicmeter, MassConcentrationUnit.MicrogramPerCubicMeter);

        /// <summary>
        ///     Get MassConcentration from MicrogramsPerDeciliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMicrogramsPerDeciliter(double microgramsperdeciliter) => new MassConcentration(microgramsperdeciliter, MassConcentrationUnit.MicrogramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration from MicrogramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMicrogramsPerLiter(double microgramsperliter) => new MassConcentration(microgramsperliter, MassConcentrationUnit.MicrogramPerLiter);

        /// <summary>
        ///     Get MassConcentration from MicrogramsPerMicroliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMicrogramsPerMicroliter(double microgramspermicroliter) => new MassConcentration(microgramspermicroliter, MassConcentrationUnit.MicrogramPerMicroliter);

        /// <summary>
        ///     Get MassConcentration from MicrogramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMicrogramsPerMilliliter(double microgramspermilliliter) => new MassConcentration(microgramspermilliliter, MassConcentrationUnit.MicrogramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration from MilligramsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMilligramsPerCubicMeter(double milligramspercubicmeter) => new MassConcentration(milligramspercubicmeter, MassConcentrationUnit.MilligramPerCubicMeter);

        /// <summary>
        ///     Get MassConcentration from MilligramsPerDeciliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMilligramsPerDeciliter(double milligramsperdeciliter) => new MassConcentration(milligramsperdeciliter, MassConcentrationUnit.MilligramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration from MilligramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMilligramsPerLiter(double milligramsperliter) => new MassConcentration(milligramsperliter, MassConcentrationUnit.MilligramPerLiter);

        /// <summary>
        ///     Get MassConcentration from MilligramsPerMicroliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMilligramsPerMicroliter(double milligramspermicroliter) => new MassConcentration(milligramspermicroliter, MassConcentrationUnit.MilligramPerMicroliter);

        /// <summary>
        ///     Get MassConcentration from MilligramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMilligramsPerMilliliter(double milligramspermilliliter) => new MassConcentration(milligramspermilliliter, MassConcentrationUnit.MilligramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration from NanogramsPerDeciliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromNanogramsPerDeciliter(double nanogramsperdeciliter) => new MassConcentration(nanogramsperdeciliter, MassConcentrationUnit.NanogramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration from NanogramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromNanogramsPerLiter(double nanogramsperliter) => new MassConcentration(nanogramsperliter, MassConcentrationUnit.NanogramPerLiter);

        /// <summary>
        ///     Get MassConcentration from NanogramsPerMicroliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromNanogramsPerMicroliter(double nanogramspermicroliter) => new MassConcentration(nanogramspermicroliter, MassConcentrationUnit.NanogramPerMicroliter);

        /// <summary>
        ///     Get MassConcentration from NanogramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromNanogramsPerMilliliter(double nanogramspermilliliter) => new MassConcentration(nanogramspermilliliter, MassConcentrationUnit.NanogramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration from PicogramsPerDeciliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromPicogramsPerDeciliter(double picogramsperdeciliter) => new MassConcentration(picogramsperdeciliter, MassConcentrationUnit.PicogramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration from PicogramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromPicogramsPerLiter(double picogramsperliter) => new MassConcentration(picogramsperliter, MassConcentrationUnit.PicogramPerLiter);

        /// <summary>
        ///     Get MassConcentration from PicogramsPerMicroliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromPicogramsPerMicroliter(double picogramspermicroliter) => new MassConcentration(picogramspermicroliter, MassConcentrationUnit.PicogramPerMicroliter);

        /// <summary>
        ///     Get MassConcentration from PicogramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromPicogramsPerMilliliter(double picogramspermilliliter) => new MassConcentration(picogramspermilliliter, MassConcentrationUnit.PicogramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration from PoundsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromPoundsPerCubicFoot(double poundspercubicfoot) => new MassConcentration(poundspercubicfoot, MassConcentrationUnit.PoundPerCubicFoot);

        /// <summary>
        ///     Get MassConcentration from PoundsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromPoundsPerCubicInch(double poundspercubicinch) => new MassConcentration(poundspercubicinch, MassConcentrationUnit.PoundPerCubicInch);

        /// <summary>
        ///     Get MassConcentration from PoundsPerImperialGallon.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromPoundsPerImperialGallon(double poundsperimperialgallon) => new MassConcentration(poundsperimperialgallon, MassConcentrationUnit.PoundPerImperialGallon);

        /// <summary>
        ///     Get MassConcentration from PoundsPerUSGallon.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromPoundsPerUSGallon(double poundsperusgallon) => new MassConcentration(poundsperusgallon, MassConcentrationUnit.PoundPerUSGallon);

        /// <summary>
        ///     Get MassConcentration from SlugsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromSlugsPerCubicFoot(double slugspercubicfoot) => new MassConcentration(slugspercubicfoot, MassConcentrationUnit.SlugPerCubicFoot);

        /// <summary>
        ///     Get MassConcentration from TonnesPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromTonnesPerCubicCentimeter(double tonnespercubiccentimeter) => new MassConcentration(tonnespercubiccentimeter, MassConcentrationUnit.TonnePerCubicCentimeter);

        /// <summary>
        ///     Get MassConcentration from TonnesPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromTonnesPerCubicMeter(double tonnespercubicmeter) => new MassConcentration(tonnespercubicmeter, MassConcentrationUnit.TonnePerCubicMeter);

        /// <summary>
        ///     Get MassConcentration from TonnesPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromTonnesPerCubicMillimeter(double tonnespercubicmillimeter) => new MassConcentration(tonnespercubicmillimeter, MassConcentrationUnit.TonnePerCubicMillimeter);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MassConcentrationUnit" /> to <see cref="MassConcentration" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MassConcentration unit value.</returns>
        public static MassConcentration From(double value, MassConcentrationUnit fromUnit)
        {
            return new MassConcentration(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(MassConcentrationUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public MassConcentration ToUnit(MassConcentrationUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new MassConcentration(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case MassConcentrationUnit.CentigramPerDeciliter: return (_value/1e-1) * 1e-2d;
                case MassConcentrationUnit.CentigramPerLiter: return (_value) * 1e-2d;
                case MassConcentrationUnit.CentigramPerMicroliter: return (_value/1e-6) * 1e-2d;
                case MassConcentrationUnit.CentigramPerMilliliter: return (_value/1e-3) * 1e-2d;
                case MassConcentrationUnit.DecigramPerDeciliter: return (_value/1e-1) * 1e-1d;
                case MassConcentrationUnit.DecigramPerLiter: return (_value) * 1e-1d;
                case MassConcentrationUnit.DecigramPerMicroliter: return (_value/1e-6) * 1e-1d;
                case MassConcentrationUnit.DecigramPerMilliliter: return (_value/1e-3) * 1e-1d;
                case MassConcentrationUnit.GramPerCubicCentimeter: return _value/1e-3;
                case MassConcentrationUnit.GramPerCubicMeter: return _value/1e3;
                case MassConcentrationUnit.GramPerCubicMillimeter: return _value/1e-6;
                case MassConcentrationUnit.GramPerDeciliter: return _value/1e-1;
                case MassConcentrationUnit.GramPerLiter: return _value;
                case MassConcentrationUnit.GramPerMicroliter: return _value/1e-6;
                case MassConcentrationUnit.GramPerMilliliter: return _value/1e-3;
                case MassConcentrationUnit.KilogramPerCubicCentimeter: return (_value/1e-3) * 1e3d;
                case MassConcentrationUnit.KilogramPerCubicMeter: return (_value/1e3) * 1e3d;
                case MassConcentrationUnit.KilogramPerCubicMillimeter: return (_value/1e-6) * 1e3d;
                case MassConcentrationUnit.KilogramPerLiter: return (_value) * 1e3d;
                case MassConcentrationUnit.KilopoundPerCubicFoot: return (_value/0.062427961) * 1e3d;
                case MassConcentrationUnit.KilopoundPerCubicInch: return (_value/3.6127298147753e-5) * 1e3d;
                case MassConcentrationUnit.MicrogramPerCubicMeter: return (_value/1e3) * 1e-6d;
                case MassConcentrationUnit.MicrogramPerDeciliter: return (_value/1e-1) * 1e-6d;
                case MassConcentrationUnit.MicrogramPerLiter: return (_value) * 1e-6d;
                case MassConcentrationUnit.MicrogramPerMicroliter: return (_value/1e-6) * 1e-6d;
                case MassConcentrationUnit.MicrogramPerMilliliter: return (_value/1e-3) * 1e-6d;
                case MassConcentrationUnit.MilligramPerCubicMeter: return (_value/1e3) * 1e-3d;
                case MassConcentrationUnit.MilligramPerDeciliter: return (_value/1e-1) * 1e-3d;
                case MassConcentrationUnit.MilligramPerLiter: return (_value) * 1e-3d;
                case MassConcentrationUnit.MilligramPerMicroliter: return (_value/1e-6) * 1e-3d;
                case MassConcentrationUnit.MilligramPerMilliliter: return (_value/1e-3) * 1e-3d;
                case MassConcentrationUnit.NanogramPerDeciliter: return (_value/1e-1) * 1e-9d;
                case MassConcentrationUnit.NanogramPerLiter: return (_value) * 1e-9d;
                case MassConcentrationUnit.NanogramPerMicroliter: return (_value/1e-6) * 1e-9d;
                case MassConcentrationUnit.NanogramPerMilliliter: return (_value/1e-3) * 1e-9d;
                case MassConcentrationUnit.PicogramPerDeciliter: return (_value/1e-1) * 1e-12d;
                case MassConcentrationUnit.PicogramPerLiter: return (_value) * 1e-12d;
                case MassConcentrationUnit.PicogramPerMicroliter: return (_value/1e-6) * 1e-12d;
                case MassConcentrationUnit.PicogramPerMilliliter: return (_value/1e-3) * 1e-12d;
                case MassConcentrationUnit.PoundPerCubicFoot: return _value/0.062427961;
                case MassConcentrationUnit.PoundPerCubicInch: return _value/3.6127298147753e-5;
                case MassConcentrationUnit.PoundPerImperialGallon: return _value*9.9776398e1;
                case MassConcentrationUnit.PoundPerUSGallon: return _value*1.19826427e2;
                case MassConcentrationUnit.SlugPerCubicFoot: return _value*515.378818;
                case MassConcentrationUnit.TonnePerCubicCentimeter: return _value/1e-9;
                case MassConcentrationUnit.TonnePerCubicMeter: return _value/0.001;
                case MassConcentrationUnit.TonnePerCubicMillimeter: return _value/1e-12;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(MassConcentrationUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case MassConcentrationUnit.CentigramPerDeciliter: return (baseUnitValue*1e-1) / 1e-2d;
                case MassConcentrationUnit.CentigramPerLiter: return (baseUnitValue) / 1e-2d;
                case MassConcentrationUnit.CentigramPerMicroliter: return (baseUnitValue*1e-6) / 1e-2d;
                case MassConcentrationUnit.CentigramPerMilliliter: return (baseUnitValue*1e-3) / 1e-2d;
                case MassConcentrationUnit.DecigramPerDeciliter: return (baseUnitValue*1e-1) / 1e-1d;
                case MassConcentrationUnit.DecigramPerLiter: return (baseUnitValue) / 1e-1d;
                case MassConcentrationUnit.DecigramPerMicroliter: return (baseUnitValue*1e-6) / 1e-1d;
                case MassConcentrationUnit.DecigramPerMilliliter: return (baseUnitValue*1e-3) / 1e-1d;
                case MassConcentrationUnit.GramPerCubicCentimeter: return baseUnitValue*1e-3;
                case MassConcentrationUnit.GramPerCubicMeter: return baseUnitValue*1e3;
                case MassConcentrationUnit.GramPerCubicMillimeter: return baseUnitValue*1e-6;
                case MassConcentrationUnit.GramPerDeciliter: return baseUnitValue*1e-1;
                case MassConcentrationUnit.GramPerLiter: return baseUnitValue;
                case MassConcentrationUnit.GramPerMicroliter: return baseUnitValue*1e-6;
                case MassConcentrationUnit.GramPerMilliliter: return baseUnitValue*1e-3;
                case MassConcentrationUnit.KilogramPerCubicCentimeter: return (baseUnitValue*1e-3) / 1e3d;
                case MassConcentrationUnit.KilogramPerCubicMeter: return (baseUnitValue*1e3) / 1e3d;
                case MassConcentrationUnit.KilogramPerCubicMillimeter: return (baseUnitValue*1e-6) / 1e3d;
                case MassConcentrationUnit.KilogramPerLiter: return (baseUnitValue) / 1e3d;
                case MassConcentrationUnit.KilopoundPerCubicFoot: return (baseUnitValue*0.062427961) / 1e3d;
                case MassConcentrationUnit.KilopoundPerCubicInch: return (baseUnitValue*3.6127298147753e-5) / 1e3d;
                case MassConcentrationUnit.MicrogramPerCubicMeter: return (baseUnitValue*1e3) / 1e-6d;
                case MassConcentrationUnit.MicrogramPerDeciliter: return (baseUnitValue*1e-1) / 1e-6d;
                case MassConcentrationUnit.MicrogramPerLiter: return (baseUnitValue) / 1e-6d;
                case MassConcentrationUnit.MicrogramPerMicroliter: return (baseUnitValue*1e-6) / 1e-6d;
                case MassConcentrationUnit.MicrogramPerMilliliter: return (baseUnitValue*1e-3) / 1e-6d;
                case MassConcentrationUnit.MilligramPerCubicMeter: return (baseUnitValue*1e3) / 1e-3d;
                case MassConcentrationUnit.MilligramPerDeciliter: return (baseUnitValue*1e-1) / 1e-3d;
                case MassConcentrationUnit.MilligramPerLiter: return (baseUnitValue) / 1e-3d;
                case MassConcentrationUnit.MilligramPerMicroliter: return (baseUnitValue*1e-6) / 1e-3d;
                case MassConcentrationUnit.MilligramPerMilliliter: return (baseUnitValue*1e-3) / 1e-3d;
                case MassConcentrationUnit.NanogramPerDeciliter: return (baseUnitValue*1e-1) / 1e-9d;
                case MassConcentrationUnit.NanogramPerLiter: return (baseUnitValue) / 1e-9d;
                case MassConcentrationUnit.NanogramPerMicroliter: return (baseUnitValue*1e-6) / 1e-9d;
                case MassConcentrationUnit.NanogramPerMilliliter: return (baseUnitValue*1e-3) / 1e-9d;
                case MassConcentrationUnit.PicogramPerDeciliter: return (baseUnitValue*1e-1) / 1e-12d;
                case MassConcentrationUnit.PicogramPerLiter: return (baseUnitValue) / 1e-12d;
                case MassConcentrationUnit.PicogramPerMicroliter: return (baseUnitValue*1e-6) / 1e-12d;
                case MassConcentrationUnit.PicogramPerMilliliter: return (baseUnitValue*1e-3) / 1e-12d;
                case MassConcentrationUnit.PoundPerCubicFoot: return baseUnitValue*0.062427961;
                case MassConcentrationUnit.PoundPerCubicInch: return baseUnitValue*3.6127298147753e-5;
                case MassConcentrationUnit.PoundPerImperialGallon: return baseUnitValue/9.9776398e1;
                case MassConcentrationUnit.PoundPerUSGallon: return baseUnitValue/1.19826427e2;
                case MassConcentrationUnit.SlugPerCubicFoot: return baseUnitValue*0.00194032033;
                case MassConcentrationUnit.TonnePerCubicCentimeter: return baseUnitValue*1e-9;
                case MassConcentrationUnit.TonnePerCubicMeter: return baseUnitValue*0.001;
                case MassConcentrationUnit.TonnePerCubicMillimeter: return baseUnitValue*1e-12;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

