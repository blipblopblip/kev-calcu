//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The SpecificWeight, or more precisely, the volumetric weight density, of a substance is its weight per unit volume.
    /// </summary>
    /// <remarks>
    ///     http://en.wikipedia.org/wiki/Specificweight
    /// </remarks>
    public struct  SpecificWeight
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly SpecificWeightUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public SpecificWeightUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public SpecificWeight(double value, SpecificWeightUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static SpecificWeightUnit BaseUnit { get; } = SpecificWeightUnit.NewtonPerCubicMeter;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static SpecificWeight MaxValue { get; } = new SpecificWeight(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static SpecificWeight MinValue { get; } = new SpecificWeight(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static SpecificWeight Zero { get; } = new SpecificWeight(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get SpecificWeight in KilogramsForcePerCubicCentimeter.
        /// </summary>
        public double KilogramsForcePerCubicCentimeter => As(SpecificWeightUnit.KilogramForcePerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in KilogramsForcePerCubicMeter.
        /// </summary>
        public double KilogramsForcePerCubicMeter => As(SpecificWeightUnit.KilogramForcePerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in KilogramsForcePerCubicMillimeter.
        /// </summary>
        public double KilogramsForcePerCubicMillimeter => As(SpecificWeightUnit.KilogramForcePerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in KilonewtonsPerCubicCentimeter.
        /// </summary>
        public double KilonewtonsPerCubicCentimeter => As(SpecificWeightUnit.KilonewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in KilonewtonsPerCubicMeter.
        /// </summary>
        public double KilonewtonsPerCubicMeter => As(SpecificWeightUnit.KilonewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in KilonewtonsPerCubicMillimeter.
        /// </summary>
        public double KilonewtonsPerCubicMillimeter => As(SpecificWeightUnit.KilonewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in KilopoundsForcePerCubicFoot.
        /// </summary>
        public double KilopoundsForcePerCubicFoot => As(SpecificWeightUnit.KilopoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in KilopoundsForcePerCubicInch.
        /// </summary>
        public double KilopoundsForcePerCubicInch => As(SpecificWeightUnit.KilopoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in MeganewtonsPerCubicMeter.
        /// </summary>
        public double MeganewtonsPerCubicMeter => As(SpecificWeightUnit.MeganewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in NewtonsPerCubicCentimeter.
        /// </summary>
        public double NewtonsPerCubicCentimeter => As(SpecificWeightUnit.NewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in NewtonsPerCubicMeter.
        /// </summary>
        public double NewtonsPerCubicMeter => As(SpecificWeightUnit.NewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in NewtonsPerCubicMillimeter.
        /// </summary>
        public double NewtonsPerCubicMillimeter => As(SpecificWeightUnit.NewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in PoundsForcePerCubicFoot.
        /// </summary>
        public double PoundsForcePerCubicFoot => As(SpecificWeightUnit.PoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in PoundsForcePerCubicInch.
        /// </summary>
        public double PoundsForcePerCubicInch => As(SpecificWeightUnit.PoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in TonnesForcePerCubicCentimeter.
        /// </summary>
        public double TonnesForcePerCubicCentimeter => As(SpecificWeightUnit.TonneForcePerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in TonnesForcePerCubicMeter.
        /// </summary>
        public double TonnesForcePerCubicMeter => As(SpecificWeightUnit.TonneForcePerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in TonnesForcePerCubicMillimeter.
        /// </summary>
        public double TonnesForcePerCubicMillimeter => As(SpecificWeightUnit.TonneForcePerCubicMillimeter);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get SpecificWeight from KilogramsForcePerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromKilogramsForcePerCubicCentimeter(double kilogramsforcepercubiccentimeter) => new SpecificWeight(kilogramsforcepercubiccentimeter, SpecificWeightUnit.KilogramForcePerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight from KilogramsForcePerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromKilogramsForcePerCubicMeter(double kilogramsforcepercubicmeter) => new SpecificWeight(kilogramsforcepercubicmeter, SpecificWeightUnit.KilogramForcePerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight from KilogramsForcePerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromKilogramsForcePerCubicMillimeter(double kilogramsforcepercubicmillimeter) => new SpecificWeight(kilogramsforcepercubicmillimeter, SpecificWeightUnit.KilogramForcePerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight from KilonewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromKilonewtonsPerCubicCentimeter(double kilonewtonspercubiccentimeter) => new SpecificWeight(kilonewtonspercubiccentimeter, SpecificWeightUnit.KilonewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight from KilonewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromKilonewtonsPerCubicMeter(double kilonewtonspercubicmeter) => new SpecificWeight(kilonewtonspercubicmeter, SpecificWeightUnit.KilonewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight from KilonewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromKilonewtonsPerCubicMillimeter(double kilonewtonspercubicmillimeter) => new SpecificWeight(kilonewtonspercubicmillimeter, SpecificWeightUnit.KilonewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight from KilopoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromKilopoundsForcePerCubicFoot(double kilopoundsforcepercubicfoot) => new SpecificWeight(kilopoundsforcepercubicfoot, SpecificWeightUnit.KilopoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight from KilopoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromKilopoundsForcePerCubicInch(double kilopoundsforcepercubicinch) => new SpecificWeight(kilopoundsforcepercubicinch, SpecificWeightUnit.KilopoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight from MeganewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromMeganewtonsPerCubicMeter(double meganewtonspercubicmeter) => new SpecificWeight(meganewtonspercubicmeter, SpecificWeightUnit.MeganewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight from NewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromNewtonsPerCubicCentimeter(double newtonspercubiccentimeter) => new SpecificWeight(newtonspercubiccentimeter, SpecificWeightUnit.NewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight from NewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromNewtonsPerCubicMeter(double newtonspercubicmeter) => new SpecificWeight(newtonspercubicmeter, SpecificWeightUnit.NewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight from NewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromNewtonsPerCubicMillimeter(double newtonspercubicmillimeter) => new SpecificWeight(newtonspercubicmillimeter, SpecificWeightUnit.NewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight from PoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromPoundsForcePerCubicFoot(double poundsforcepercubicfoot) => new SpecificWeight(poundsforcepercubicfoot, SpecificWeightUnit.PoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight from PoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromPoundsForcePerCubicInch(double poundsforcepercubicinch) => new SpecificWeight(poundsforcepercubicinch, SpecificWeightUnit.PoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight from TonnesForcePerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromTonnesForcePerCubicCentimeter(double tonnesforcepercubiccentimeter) => new SpecificWeight(tonnesforcepercubiccentimeter, SpecificWeightUnit.TonneForcePerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight from TonnesForcePerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromTonnesForcePerCubicMeter(double tonnesforcepercubicmeter) => new SpecificWeight(tonnesforcepercubicmeter, SpecificWeightUnit.TonneForcePerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight from TonnesForcePerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromTonnesForcePerCubicMillimeter(double tonnesforcepercubicmillimeter) => new SpecificWeight(tonnesforcepercubicmillimeter, SpecificWeightUnit.TonneForcePerCubicMillimeter);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpecificWeightUnit" /> to <see cref="SpecificWeight" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>SpecificWeight unit value.</returns>
        public static SpecificWeight From(double value, SpecificWeightUnit fromUnit)
        {
            return new SpecificWeight(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(SpecificWeightUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public SpecificWeight ToUnit(SpecificWeightUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new SpecificWeight(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case SpecificWeightUnit.KilogramForcePerCubicCentimeter: return _value*9.80665e6;
                case SpecificWeightUnit.KilogramForcePerCubicMeter: return _value*9.80665;
                case SpecificWeightUnit.KilogramForcePerCubicMillimeter: return _value*9.80665e9;
                case SpecificWeightUnit.KilonewtonPerCubicCentimeter: return (_value*1000000) * 1e3d;
                case SpecificWeightUnit.KilonewtonPerCubicMeter: return (_value) * 1e3d;
                case SpecificWeightUnit.KilonewtonPerCubicMillimeter: return (_value*1000000000) * 1e3d;
                case SpecificWeightUnit.KilopoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e3d;
                case SpecificWeightUnit.KilopoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e3d;
                case SpecificWeightUnit.MeganewtonPerCubicMeter: return (_value) * 1e6d;
                case SpecificWeightUnit.NewtonPerCubicCentimeter: return _value*1000000;
                case SpecificWeightUnit.NewtonPerCubicMeter: return _value;
                case SpecificWeightUnit.NewtonPerCubicMillimeter: return _value*1000000000;
                case SpecificWeightUnit.PoundForcePerCubicFoot: return _value*1.570874638462462e2;
                case SpecificWeightUnit.PoundForcePerCubicInch: return _value*2.714471375263134e5;
                case SpecificWeightUnit.TonneForcePerCubicCentimeter: return _value*9.80665e9;
                case SpecificWeightUnit.TonneForcePerCubicMeter: return _value*9.80665e3;
                case SpecificWeightUnit.TonneForcePerCubicMillimeter: return _value*9.80665e12;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(SpecificWeightUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case SpecificWeightUnit.KilogramForcePerCubicCentimeter: return baseUnitValue/9.80665e6;
                case SpecificWeightUnit.KilogramForcePerCubicMeter: return baseUnitValue/9.80665;
                case SpecificWeightUnit.KilogramForcePerCubicMillimeter: return baseUnitValue/9.80665e9;
                case SpecificWeightUnit.KilonewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e3d;
                case SpecificWeightUnit.KilonewtonPerCubicMeter: return (baseUnitValue) / 1e3d;
                case SpecificWeightUnit.KilonewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e3d;
                case SpecificWeightUnit.KilopoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e3d;
                case SpecificWeightUnit.KilopoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e3d;
                case SpecificWeightUnit.MeganewtonPerCubicMeter: return (baseUnitValue) / 1e6d;
                case SpecificWeightUnit.NewtonPerCubicCentimeter: return baseUnitValue*0.000001;
                case SpecificWeightUnit.NewtonPerCubicMeter: return baseUnitValue;
                case SpecificWeightUnit.NewtonPerCubicMillimeter: return baseUnitValue*0.000000001;
                case SpecificWeightUnit.PoundForcePerCubicFoot: return baseUnitValue/1.570874638462462e2;
                case SpecificWeightUnit.PoundForcePerCubicInch: return baseUnitValue/2.714471375263134e5;
                case SpecificWeightUnit.TonneForcePerCubicCentimeter: return baseUnitValue/9.80665e9;
                case SpecificWeightUnit.TonneForcePerCubicMeter: return baseUnitValue/9.80665e3;
                case SpecificWeightUnit.TonneForcePerCubicMillimeter: return baseUnitValue/9.80665e12;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

