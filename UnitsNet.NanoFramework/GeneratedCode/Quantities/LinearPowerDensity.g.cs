//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The Linear Power Density of a substance is its power per unit length.  The term linear density is most often used when describing the characteristics of one-dimensional objects, although linear density can also be used to describe the density of a three-dimensional quantity along one particular dimension.
    /// </summary>
    /// <remarks>
    ///     http://en.wikipedia.org/wiki/Linear_density
    /// </remarks>
    public struct  LinearPowerDensity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly LinearPowerDensityUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public LinearPowerDensityUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public LinearPowerDensity(double value, LinearPowerDensityUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static LinearPowerDensityUnit BaseUnit { get; } = LinearPowerDensityUnit.WattPerMeter;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static LinearPowerDensity MaxValue { get; } = new LinearPowerDensity(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static LinearPowerDensity MinValue { get; } = new LinearPowerDensity(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static LinearPowerDensity Zero { get; } = new LinearPowerDensity(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get LinearPowerDensity in GigawattsPerCentimeter.
        /// </summary>
        public double GigawattsPerCentimeter => As(LinearPowerDensityUnit.GigawattPerCentimeter);

        /// <summary>
        ///     Get LinearPowerDensity in GigawattsPerFoot.
        /// </summary>
        public double GigawattsPerFoot => As(LinearPowerDensityUnit.GigawattPerFoot);

        /// <summary>
        ///     Get LinearPowerDensity in GigawattsPerInch.
        /// </summary>
        public double GigawattsPerInch => As(LinearPowerDensityUnit.GigawattPerInch);

        /// <summary>
        ///     Get LinearPowerDensity in GigawattsPerMeter.
        /// </summary>
        public double GigawattsPerMeter => As(LinearPowerDensityUnit.GigawattPerMeter);

        /// <summary>
        ///     Get LinearPowerDensity in GigawattsPerMillimeter.
        /// </summary>
        public double GigawattsPerMillimeter => As(LinearPowerDensityUnit.GigawattPerMillimeter);

        /// <summary>
        ///     Get LinearPowerDensity in KilowattsPerCentimeter.
        /// </summary>
        public double KilowattsPerCentimeter => As(LinearPowerDensityUnit.KilowattPerCentimeter);

        /// <summary>
        ///     Get LinearPowerDensity in KilowattsPerFoot.
        /// </summary>
        public double KilowattsPerFoot => As(LinearPowerDensityUnit.KilowattPerFoot);

        /// <summary>
        ///     Get LinearPowerDensity in KilowattsPerInch.
        /// </summary>
        public double KilowattsPerInch => As(LinearPowerDensityUnit.KilowattPerInch);

        /// <summary>
        ///     Get LinearPowerDensity in KilowattsPerMeter.
        /// </summary>
        public double KilowattsPerMeter => As(LinearPowerDensityUnit.KilowattPerMeter);

        /// <summary>
        ///     Get LinearPowerDensity in KilowattsPerMillimeter.
        /// </summary>
        public double KilowattsPerMillimeter => As(LinearPowerDensityUnit.KilowattPerMillimeter);

        /// <summary>
        ///     Get LinearPowerDensity in MegawattsPerCentimeter.
        /// </summary>
        public double MegawattsPerCentimeter => As(LinearPowerDensityUnit.MegawattPerCentimeter);

        /// <summary>
        ///     Get LinearPowerDensity in MegawattsPerFoot.
        /// </summary>
        public double MegawattsPerFoot => As(LinearPowerDensityUnit.MegawattPerFoot);

        /// <summary>
        ///     Get LinearPowerDensity in MegawattsPerInch.
        /// </summary>
        public double MegawattsPerInch => As(LinearPowerDensityUnit.MegawattPerInch);

        /// <summary>
        ///     Get LinearPowerDensity in MegawattsPerMeter.
        /// </summary>
        public double MegawattsPerMeter => As(LinearPowerDensityUnit.MegawattPerMeter);

        /// <summary>
        ///     Get LinearPowerDensity in MegawattsPerMillimeter.
        /// </summary>
        public double MegawattsPerMillimeter => As(LinearPowerDensityUnit.MegawattPerMillimeter);

        /// <summary>
        ///     Get LinearPowerDensity in MilliwattsPerCentimeter.
        /// </summary>
        public double MilliwattsPerCentimeter => As(LinearPowerDensityUnit.MilliwattPerCentimeter);

        /// <summary>
        ///     Get LinearPowerDensity in MilliwattsPerFoot.
        /// </summary>
        public double MilliwattsPerFoot => As(LinearPowerDensityUnit.MilliwattPerFoot);

        /// <summary>
        ///     Get LinearPowerDensity in MilliwattsPerInch.
        /// </summary>
        public double MilliwattsPerInch => As(LinearPowerDensityUnit.MilliwattPerInch);

        /// <summary>
        ///     Get LinearPowerDensity in MilliwattsPerMeter.
        /// </summary>
        public double MilliwattsPerMeter => As(LinearPowerDensityUnit.MilliwattPerMeter);

        /// <summary>
        ///     Get LinearPowerDensity in MilliwattsPerMillimeter.
        /// </summary>
        public double MilliwattsPerMillimeter => As(LinearPowerDensityUnit.MilliwattPerMillimeter);

        /// <summary>
        ///     Get LinearPowerDensity in WattsPerCentimeter.
        /// </summary>
        public double WattsPerCentimeter => As(LinearPowerDensityUnit.WattPerCentimeter);

        /// <summary>
        ///     Get LinearPowerDensity in WattsPerFoot.
        /// </summary>
        public double WattsPerFoot => As(LinearPowerDensityUnit.WattPerFoot);

        /// <summary>
        ///     Get LinearPowerDensity in WattsPerInch.
        /// </summary>
        public double WattsPerInch => As(LinearPowerDensityUnit.WattPerInch);

        /// <summary>
        ///     Get LinearPowerDensity in WattsPerMeter.
        /// </summary>
        public double WattsPerMeter => As(LinearPowerDensityUnit.WattPerMeter);

        /// <summary>
        ///     Get LinearPowerDensity in WattsPerMillimeter.
        /// </summary>
        public double WattsPerMillimeter => As(LinearPowerDensityUnit.WattPerMillimeter);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get LinearPowerDensity from GigawattsPerCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromGigawattsPerCentimeter(double gigawattspercentimeter) => new LinearPowerDensity(gigawattspercentimeter, LinearPowerDensityUnit.GigawattPerCentimeter);

        /// <summary>
        ///     Get LinearPowerDensity from GigawattsPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromGigawattsPerFoot(double gigawattsperfoot) => new LinearPowerDensity(gigawattsperfoot, LinearPowerDensityUnit.GigawattPerFoot);

        /// <summary>
        ///     Get LinearPowerDensity from GigawattsPerInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromGigawattsPerInch(double gigawattsperinch) => new LinearPowerDensity(gigawattsperinch, LinearPowerDensityUnit.GigawattPerInch);

        /// <summary>
        ///     Get LinearPowerDensity from GigawattsPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromGigawattsPerMeter(double gigawattspermeter) => new LinearPowerDensity(gigawattspermeter, LinearPowerDensityUnit.GigawattPerMeter);

        /// <summary>
        ///     Get LinearPowerDensity from GigawattsPerMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromGigawattsPerMillimeter(double gigawattspermillimeter) => new LinearPowerDensity(gigawattspermillimeter, LinearPowerDensityUnit.GigawattPerMillimeter);

        /// <summary>
        ///     Get LinearPowerDensity from KilowattsPerCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromKilowattsPerCentimeter(double kilowattspercentimeter) => new LinearPowerDensity(kilowattspercentimeter, LinearPowerDensityUnit.KilowattPerCentimeter);

        /// <summary>
        ///     Get LinearPowerDensity from KilowattsPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromKilowattsPerFoot(double kilowattsperfoot) => new LinearPowerDensity(kilowattsperfoot, LinearPowerDensityUnit.KilowattPerFoot);

        /// <summary>
        ///     Get LinearPowerDensity from KilowattsPerInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromKilowattsPerInch(double kilowattsperinch) => new LinearPowerDensity(kilowattsperinch, LinearPowerDensityUnit.KilowattPerInch);

        /// <summary>
        ///     Get LinearPowerDensity from KilowattsPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromKilowattsPerMeter(double kilowattspermeter) => new LinearPowerDensity(kilowattspermeter, LinearPowerDensityUnit.KilowattPerMeter);

        /// <summary>
        ///     Get LinearPowerDensity from KilowattsPerMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromKilowattsPerMillimeter(double kilowattspermillimeter) => new LinearPowerDensity(kilowattspermillimeter, LinearPowerDensityUnit.KilowattPerMillimeter);

        /// <summary>
        ///     Get LinearPowerDensity from MegawattsPerCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMegawattsPerCentimeter(double megawattspercentimeter) => new LinearPowerDensity(megawattspercentimeter, LinearPowerDensityUnit.MegawattPerCentimeter);

        /// <summary>
        ///     Get LinearPowerDensity from MegawattsPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMegawattsPerFoot(double megawattsperfoot) => new LinearPowerDensity(megawattsperfoot, LinearPowerDensityUnit.MegawattPerFoot);

        /// <summary>
        ///     Get LinearPowerDensity from MegawattsPerInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMegawattsPerInch(double megawattsperinch) => new LinearPowerDensity(megawattsperinch, LinearPowerDensityUnit.MegawattPerInch);

        /// <summary>
        ///     Get LinearPowerDensity from MegawattsPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMegawattsPerMeter(double megawattspermeter) => new LinearPowerDensity(megawattspermeter, LinearPowerDensityUnit.MegawattPerMeter);

        /// <summary>
        ///     Get LinearPowerDensity from MegawattsPerMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMegawattsPerMillimeter(double megawattspermillimeter) => new LinearPowerDensity(megawattspermillimeter, LinearPowerDensityUnit.MegawattPerMillimeter);

        /// <summary>
        ///     Get LinearPowerDensity from MilliwattsPerCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMilliwattsPerCentimeter(double milliwattspercentimeter) => new LinearPowerDensity(milliwattspercentimeter, LinearPowerDensityUnit.MilliwattPerCentimeter);

        /// <summary>
        ///     Get LinearPowerDensity from MilliwattsPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMilliwattsPerFoot(double milliwattsperfoot) => new LinearPowerDensity(milliwattsperfoot, LinearPowerDensityUnit.MilliwattPerFoot);

        /// <summary>
        ///     Get LinearPowerDensity from MilliwattsPerInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMilliwattsPerInch(double milliwattsperinch) => new LinearPowerDensity(milliwattsperinch, LinearPowerDensityUnit.MilliwattPerInch);

        /// <summary>
        ///     Get LinearPowerDensity from MilliwattsPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMilliwattsPerMeter(double milliwattspermeter) => new LinearPowerDensity(milliwattspermeter, LinearPowerDensityUnit.MilliwattPerMeter);

        /// <summary>
        ///     Get LinearPowerDensity from MilliwattsPerMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMilliwattsPerMillimeter(double milliwattspermillimeter) => new LinearPowerDensity(milliwattspermillimeter, LinearPowerDensityUnit.MilliwattPerMillimeter);

        /// <summary>
        ///     Get LinearPowerDensity from WattsPerCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromWattsPerCentimeter(double wattspercentimeter) => new LinearPowerDensity(wattspercentimeter, LinearPowerDensityUnit.WattPerCentimeter);

        /// <summary>
        ///     Get LinearPowerDensity from WattsPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromWattsPerFoot(double wattsperfoot) => new LinearPowerDensity(wattsperfoot, LinearPowerDensityUnit.WattPerFoot);

        /// <summary>
        ///     Get LinearPowerDensity from WattsPerInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromWattsPerInch(double wattsperinch) => new LinearPowerDensity(wattsperinch, LinearPowerDensityUnit.WattPerInch);

        /// <summary>
        ///     Get LinearPowerDensity from WattsPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromWattsPerMeter(double wattspermeter) => new LinearPowerDensity(wattspermeter, LinearPowerDensityUnit.WattPerMeter);

        /// <summary>
        ///     Get LinearPowerDensity from WattsPerMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromWattsPerMillimeter(double wattspermillimeter) => new LinearPowerDensity(wattspermillimeter, LinearPowerDensityUnit.WattPerMillimeter);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="LinearPowerDensityUnit" /> to <see cref="LinearPowerDensity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>LinearPowerDensity unit value.</returns>
        public static LinearPowerDensity From(double value, LinearPowerDensityUnit fromUnit)
        {
            return new LinearPowerDensity(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(LinearPowerDensityUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public LinearPowerDensity ToUnit(LinearPowerDensityUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new LinearPowerDensity(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case LinearPowerDensityUnit.GigawattPerCentimeter: return (_value*1e2) * 1e9d;
                case LinearPowerDensityUnit.GigawattPerFoot: return (_value*3.280839895) * 1e9d;
                case LinearPowerDensityUnit.GigawattPerInch: return (_value*39.37007874) * 1e9d;
                case LinearPowerDensityUnit.GigawattPerMeter: return (_value) * 1e9d;
                case LinearPowerDensityUnit.GigawattPerMillimeter: return (_value*1e3) * 1e9d;
                case LinearPowerDensityUnit.KilowattPerCentimeter: return (_value*1e2) * 1e3d;
                case LinearPowerDensityUnit.KilowattPerFoot: return (_value*3.280839895) * 1e3d;
                case LinearPowerDensityUnit.KilowattPerInch: return (_value*39.37007874) * 1e3d;
                case LinearPowerDensityUnit.KilowattPerMeter: return (_value) * 1e3d;
                case LinearPowerDensityUnit.KilowattPerMillimeter: return (_value*1e3) * 1e3d;
                case LinearPowerDensityUnit.MegawattPerCentimeter: return (_value*1e2) * 1e6d;
                case LinearPowerDensityUnit.MegawattPerFoot: return (_value*3.280839895) * 1e6d;
                case LinearPowerDensityUnit.MegawattPerInch: return (_value*39.37007874) * 1e6d;
                case LinearPowerDensityUnit.MegawattPerMeter: return (_value) * 1e6d;
                case LinearPowerDensityUnit.MegawattPerMillimeter: return (_value*1e3) * 1e6d;
                case LinearPowerDensityUnit.MilliwattPerCentimeter: return (_value*1e2) * 1e-3d;
                case LinearPowerDensityUnit.MilliwattPerFoot: return (_value*3.280839895) * 1e-3d;
                case LinearPowerDensityUnit.MilliwattPerInch: return (_value*39.37007874) * 1e-3d;
                case LinearPowerDensityUnit.MilliwattPerMeter: return (_value) * 1e-3d;
                case LinearPowerDensityUnit.MilliwattPerMillimeter: return (_value*1e3) * 1e-3d;
                case LinearPowerDensityUnit.WattPerCentimeter: return _value*1e2;
                case LinearPowerDensityUnit.WattPerFoot: return _value*3.280839895;
                case LinearPowerDensityUnit.WattPerInch: return _value*39.37007874;
                case LinearPowerDensityUnit.WattPerMeter: return _value;
                case LinearPowerDensityUnit.WattPerMillimeter: return _value*1e3;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(LinearPowerDensityUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case LinearPowerDensityUnit.GigawattPerCentimeter: return (baseUnitValue/1e2) / 1e9d;
                case LinearPowerDensityUnit.GigawattPerFoot: return (baseUnitValue/3.280839895) / 1e9d;
                case LinearPowerDensityUnit.GigawattPerInch: return (baseUnitValue/39.37007874) / 1e9d;
                case LinearPowerDensityUnit.GigawattPerMeter: return (baseUnitValue) / 1e9d;
                case LinearPowerDensityUnit.GigawattPerMillimeter: return (baseUnitValue/1e3) / 1e9d;
                case LinearPowerDensityUnit.KilowattPerCentimeter: return (baseUnitValue/1e2) / 1e3d;
                case LinearPowerDensityUnit.KilowattPerFoot: return (baseUnitValue/3.280839895) / 1e3d;
                case LinearPowerDensityUnit.KilowattPerInch: return (baseUnitValue/39.37007874) / 1e3d;
                case LinearPowerDensityUnit.KilowattPerMeter: return (baseUnitValue) / 1e3d;
                case LinearPowerDensityUnit.KilowattPerMillimeter: return (baseUnitValue/1e3) / 1e3d;
                case LinearPowerDensityUnit.MegawattPerCentimeter: return (baseUnitValue/1e2) / 1e6d;
                case LinearPowerDensityUnit.MegawattPerFoot: return (baseUnitValue/3.280839895) / 1e6d;
                case LinearPowerDensityUnit.MegawattPerInch: return (baseUnitValue/39.37007874) / 1e6d;
                case LinearPowerDensityUnit.MegawattPerMeter: return (baseUnitValue) / 1e6d;
                case LinearPowerDensityUnit.MegawattPerMillimeter: return (baseUnitValue/1e3) / 1e6d;
                case LinearPowerDensityUnit.MilliwattPerCentimeter: return (baseUnitValue/1e2) / 1e-3d;
                case LinearPowerDensityUnit.MilliwattPerFoot: return (baseUnitValue/3.280839895) / 1e-3d;
                case LinearPowerDensityUnit.MilliwattPerInch: return (baseUnitValue/39.37007874) / 1e-3d;
                case LinearPowerDensityUnit.MilliwattPerMeter: return (baseUnitValue) / 1e-3d;
                case LinearPowerDensityUnit.MilliwattPerMillimeter: return (baseUnitValue/1e3) / 1e-3d;
                case LinearPowerDensityUnit.WattPerCentimeter: return baseUnitValue/1e2;
                case LinearPowerDensityUnit.WattPerFoot: return baseUnitValue/3.280839895;
                case LinearPowerDensityUnit.WattPerInch: return baseUnitValue/39.37007874;
                case LinearPowerDensityUnit.WattPerMeter: return baseUnitValue;
                case LinearPowerDensityUnit.WattPerMillimeter: return baseUnitValue/1e3;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

