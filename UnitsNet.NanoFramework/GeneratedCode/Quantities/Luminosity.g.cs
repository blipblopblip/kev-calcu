//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Luminosity is an absolute measure of radiated electromagnetic power (light), the radiant power emitted by a light-emitting object.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Luminosity
    /// </remarks>
    public struct  Luminosity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly LuminosityUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public LuminosityUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Luminosity(double value, LuminosityUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static LuminosityUnit BaseUnit { get; } = LuminosityUnit.Watt;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static Luminosity MaxValue { get; } = new Luminosity(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static Luminosity MinValue { get; } = new Luminosity(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Luminosity Zero { get; } = new Luminosity(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get Luminosity in Decawatts.
        /// </summary>
        public double Decawatts => As(LuminosityUnit.Decawatt);

        /// <summary>
        ///     Get Luminosity in Deciwatts.
        /// </summary>
        public double Deciwatts => As(LuminosityUnit.Deciwatt);

        /// <summary>
        ///     Get Luminosity in Femtowatts.
        /// </summary>
        public double Femtowatts => As(LuminosityUnit.Femtowatt);

        /// <summary>
        ///     Get Luminosity in Gigawatts.
        /// </summary>
        public double Gigawatts => As(LuminosityUnit.Gigawatt);

        /// <summary>
        ///     Get Luminosity in Kilowatts.
        /// </summary>
        public double Kilowatts => As(LuminosityUnit.Kilowatt);

        /// <summary>
        ///     Get Luminosity in Megawatts.
        /// </summary>
        public double Megawatts => As(LuminosityUnit.Megawatt);

        /// <summary>
        ///     Get Luminosity in Microwatts.
        /// </summary>
        public double Microwatts => As(LuminosityUnit.Microwatt);

        /// <summary>
        ///     Get Luminosity in Milliwatts.
        /// </summary>
        public double Milliwatts => As(LuminosityUnit.Milliwatt);

        /// <summary>
        ///     Get Luminosity in Nanowatts.
        /// </summary>
        public double Nanowatts => As(LuminosityUnit.Nanowatt);

        /// <summary>
        ///     Get Luminosity in Petawatts.
        /// </summary>
        public double Petawatts => As(LuminosityUnit.Petawatt);

        /// <summary>
        ///     Get Luminosity in Picowatts.
        /// </summary>
        public double Picowatts => As(LuminosityUnit.Picowatt);

        /// <summary>
        ///     Get Luminosity in SolarLuminosities.
        /// </summary>
        public double SolarLuminosities => As(LuminosityUnit.SolarLuminosity);

        /// <summary>
        ///     Get Luminosity in Terawatts.
        /// </summary>
        public double Terawatts => As(LuminosityUnit.Terawatt);

        /// <summary>
        ///     Get Luminosity in Watts.
        /// </summary>
        public double Watts => As(LuminosityUnit.Watt);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Luminosity from Decawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminosity FromDecawatts(double decawatts) => new Luminosity(decawatts, LuminosityUnit.Decawatt);

        /// <summary>
        ///     Get Luminosity from Deciwatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminosity FromDeciwatts(double deciwatts) => new Luminosity(deciwatts, LuminosityUnit.Deciwatt);

        /// <summary>
        ///     Get Luminosity from Femtowatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminosity FromFemtowatts(double femtowatts) => new Luminosity(femtowatts, LuminosityUnit.Femtowatt);

        /// <summary>
        ///     Get Luminosity from Gigawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminosity FromGigawatts(double gigawatts) => new Luminosity(gigawatts, LuminosityUnit.Gigawatt);

        /// <summary>
        ///     Get Luminosity from Kilowatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminosity FromKilowatts(double kilowatts) => new Luminosity(kilowatts, LuminosityUnit.Kilowatt);

        /// <summary>
        ///     Get Luminosity from Megawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminosity FromMegawatts(double megawatts) => new Luminosity(megawatts, LuminosityUnit.Megawatt);

        /// <summary>
        ///     Get Luminosity from Microwatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminosity FromMicrowatts(double microwatts) => new Luminosity(microwatts, LuminosityUnit.Microwatt);

        /// <summary>
        ///     Get Luminosity from Milliwatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminosity FromMilliwatts(double milliwatts) => new Luminosity(milliwatts, LuminosityUnit.Milliwatt);

        /// <summary>
        ///     Get Luminosity from Nanowatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminosity FromNanowatts(double nanowatts) => new Luminosity(nanowatts, LuminosityUnit.Nanowatt);

        /// <summary>
        ///     Get Luminosity from Petawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminosity FromPetawatts(double petawatts) => new Luminosity(petawatts, LuminosityUnit.Petawatt);

        /// <summary>
        ///     Get Luminosity from Picowatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminosity FromPicowatts(double picowatts) => new Luminosity(picowatts, LuminosityUnit.Picowatt);

        /// <summary>
        ///     Get Luminosity from SolarLuminosities.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminosity FromSolarLuminosities(double solarluminosities) => new Luminosity(solarluminosities, LuminosityUnit.SolarLuminosity);

        /// <summary>
        ///     Get Luminosity from Terawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminosity FromTerawatts(double terawatts) => new Luminosity(terawatts, LuminosityUnit.Terawatt);

        /// <summary>
        ///     Get Luminosity from Watts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminosity FromWatts(double watts) => new Luminosity(watts, LuminosityUnit.Watt);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="LuminosityUnit" /> to <see cref="Luminosity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Luminosity unit value.</returns>
        public static Luminosity From(double value, LuminosityUnit fromUnit)
        {
            return new Luminosity(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(LuminosityUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public Luminosity ToUnit(LuminosityUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new Luminosity(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case LuminosityUnit.Decawatt: return (_value) * 1e1d;
                case LuminosityUnit.Deciwatt: return (_value) * 1e-1d;
                case LuminosityUnit.Femtowatt: return (_value) * 1e-15d;
                case LuminosityUnit.Gigawatt: return (_value) * 1e9d;
                case LuminosityUnit.Kilowatt: return (_value) * 1e3d;
                case LuminosityUnit.Megawatt: return (_value) * 1e6d;
                case LuminosityUnit.Microwatt: return (_value) * 1e-6d;
                case LuminosityUnit.Milliwatt: return (_value) * 1e-3d;
                case LuminosityUnit.Nanowatt: return (_value) * 1e-9d;
                case LuminosityUnit.Petawatt: return (_value) * 1e15d;
                case LuminosityUnit.Picowatt: return (_value) * 1e-12d;
                case LuminosityUnit.SolarLuminosity: return _value * 3.846e26;
                case LuminosityUnit.Terawatt: return (_value) * 1e12d;
                case LuminosityUnit.Watt: return _value;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(LuminosityUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case LuminosityUnit.Decawatt: return (baseUnitValue) / 1e1d;
                case LuminosityUnit.Deciwatt: return (baseUnitValue) / 1e-1d;
                case LuminosityUnit.Femtowatt: return (baseUnitValue) / 1e-15d;
                case LuminosityUnit.Gigawatt: return (baseUnitValue) / 1e9d;
                case LuminosityUnit.Kilowatt: return (baseUnitValue) / 1e3d;
                case LuminosityUnit.Megawatt: return (baseUnitValue) / 1e6d;
                case LuminosityUnit.Microwatt: return (baseUnitValue) / 1e-6d;
                case LuminosityUnit.Milliwatt: return (baseUnitValue) / 1e-3d;
                case LuminosityUnit.Nanowatt: return (baseUnitValue) / 1e-9d;
                case LuminosityUnit.Petawatt: return (baseUnitValue) / 1e15d;
                case LuminosityUnit.Picowatt: return (baseUnitValue) / 1e-12d;
                case LuminosityUnit.SolarLuminosity: return baseUnitValue / 3.846e26;
                case LuminosityUnit.Terawatt: return (baseUnitValue) / 1e12d;
                case LuminosityUnit.Watt: return baseUnitValue;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

