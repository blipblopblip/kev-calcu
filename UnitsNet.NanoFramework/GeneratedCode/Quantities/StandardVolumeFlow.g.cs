//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The molar flow rate of a gas corrected to standardized conditions of temperature and pressure thus representing a fixed number of moles of gas regardless of composition and actual flow conditions.
    /// </summary>
    public struct  StandardVolumeFlow
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly StandardVolumeFlowUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public StandardVolumeFlowUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public StandardVolumeFlow(double value, StandardVolumeFlowUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static StandardVolumeFlowUnit BaseUnit { get; } = StandardVolumeFlowUnit.StandardCubicMeterPerSecond;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static StandardVolumeFlow MaxValue { get; } = new StandardVolumeFlow(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static StandardVolumeFlow MinValue { get; } = new StandardVolumeFlow(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static StandardVolumeFlow Zero { get; } = new StandardVolumeFlow(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get StandardVolumeFlow in StandardCubicCentimetersPerMinute.
        /// </summary>
        public double StandardCubicCentimetersPerMinute => As(StandardVolumeFlowUnit.StandardCubicCentimeterPerMinute);

        /// <summary>
        ///     Get StandardVolumeFlow in StandardCubicFeetPerHour.
        /// </summary>
        public double StandardCubicFeetPerHour => As(StandardVolumeFlowUnit.StandardCubicFootPerHour);

        /// <summary>
        ///     Get StandardVolumeFlow in StandardCubicFeetPerMinute.
        /// </summary>
        public double StandardCubicFeetPerMinute => As(StandardVolumeFlowUnit.StandardCubicFootPerMinute);

        /// <summary>
        ///     Get StandardVolumeFlow in StandardCubicFeetPerSecond.
        /// </summary>
        public double StandardCubicFeetPerSecond => As(StandardVolumeFlowUnit.StandardCubicFootPerSecond);

        /// <summary>
        ///     Get StandardVolumeFlow in StandardCubicMetersPerDay.
        /// </summary>
        public double StandardCubicMetersPerDay => As(StandardVolumeFlowUnit.StandardCubicMeterPerDay);

        /// <summary>
        ///     Get StandardVolumeFlow in StandardCubicMetersPerHour.
        /// </summary>
        public double StandardCubicMetersPerHour => As(StandardVolumeFlowUnit.StandardCubicMeterPerHour);

        /// <summary>
        ///     Get StandardVolumeFlow in StandardCubicMetersPerMinute.
        /// </summary>
        public double StandardCubicMetersPerMinute => As(StandardVolumeFlowUnit.StandardCubicMeterPerMinute);

        /// <summary>
        ///     Get StandardVolumeFlow in StandardCubicMetersPerSecond.
        /// </summary>
        public double StandardCubicMetersPerSecond => As(StandardVolumeFlowUnit.StandardCubicMeterPerSecond);

        /// <summary>
        ///     Get StandardVolumeFlow in StandardLitersPerMinute.
        /// </summary>
        public double StandardLitersPerMinute => As(StandardVolumeFlowUnit.StandardLiterPerMinute);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get StandardVolumeFlow from StandardCubicCentimetersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static StandardVolumeFlow FromStandardCubicCentimetersPerMinute(double standardcubiccentimetersperminute) => new StandardVolumeFlow(standardcubiccentimetersperminute, StandardVolumeFlowUnit.StandardCubicCentimeterPerMinute);

        /// <summary>
        ///     Get StandardVolumeFlow from StandardCubicFeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static StandardVolumeFlow FromStandardCubicFeetPerHour(double standardcubicfeetperhour) => new StandardVolumeFlow(standardcubicfeetperhour, StandardVolumeFlowUnit.StandardCubicFootPerHour);

        /// <summary>
        ///     Get StandardVolumeFlow from StandardCubicFeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static StandardVolumeFlow FromStandardCubicFeetPerMinute(double standardcubicfeetperminute) => new StandardVolumeFlow(standardcubicfeetperminute, StandardVolumeFlowUnit.StandardCubicFootPerMinute);

        /// <summary>
        ///     Get StandardVolumeFlow from StandardCubicFeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static StandardVolumeFlow FromStandardCubicFeetPerSecond(double standardcubicfeetpersecond) => new StandardVolumeFlow(standardcubicfeetpersecond, StandardVolumeFlowUnit.StandardCubicFootPerSecond);

        /// <summary>
        ///     Get StandardVolumeFlow from StandardCubicMetersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static StandardVolumeFlow FromStandardCubicMetersPerDay(double standardcubicmetersperday) => new StandardVolumeFlow(standardcubicmetersperday, StandardVolumeFlowUnit.StandardCubicMeterPerDay);

        /// <summary>
        ///     Get StandardVolumeFlow from StandardCubicMetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static StandardVolumeFlow FromStandardCubicMetersPerHour(double standardcubicmetersperhour) => new StandardVolumeFlow(standardcubicmetersperhour, StandardVolumeFlowUnit.StandardCubicMeterPerHour);

        /// <summary>
        ///     Get StandardVolumeFlow from StandardCubicMetersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static StandardVolumeFlow FromStandardCubicMetersPerMinute(double standardcubicmetersperminute) => new StandardVolumeFlow(standardcubicmetersperminute, StandardVolumeFlowUnit.StandardCubicMeterPerMinute);

        /// <summary>
        ///     Get StandardVolumeFlow from StandardCubicMetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static StandardVolumeFlow FromStandardCubicMetersPerSecond(double standardcubicmeterspersecond) => new StandardVolumeFlow(standardcubicmeterspersecond, StandardVolumeFlowUnit.StandardCubicMeterPerSecond);

        /// <summary>
        ///     Get StandardVolumeFlow from StandardLitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static StandardVolumeFlow FromStandardLitersPerMinute(double standardlitersperminute) => new StandardVolumeFlow(standardlitersperminute, StandardVolumeFlowUnit.StandardLiterPerMinute);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="StandardVolumeFlowUnit" /> to <see cref="StandardVolumeFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>StandardVolumeFlow unit value.</returns>
        public static StandardVolumeFlow From(double value, StandardVolumeFlowUnit fromUnit)
        {
            return new StandardVolumeFlow(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(StandardVolumeFlowUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public StandardVolumeFlow ToUnit(StandardVolumeFlowUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new StandardVolumeFlow(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case StandardVolumeFlowUnit.StandardCubicCentimeterPerMinute: return _value/6e7;
                case StandardVolumeFlowUnit.StandardCubicFootPerHour: return _value*7.8657907199999087346816086183876e-6;
                case StandardVolumeFlowUnit.StandardCubicFootPerMinute: return _value/2118.88000326;
                case StandardVolumeFlowUnit.StandardCubicFootPerSecond: return _value/35.314666721;
                case StandardVolumeFlowUnit.StandardCubicMeterPerDay: return _value/86400;
                case StandardVolumeFlowUnit.StandardCubicMeterPerHour: return _value/3600;
                case StandardVolumeFlowUnit.StandardCubicMeterPerMinute: return _value/60;
                case StandardVolumeFlowUnit.StandardCubicMeterPerSecond: return _value;
                case StandardVolumeFlowUnit.StandardLiterPerMinute: return _value/60000;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(StandardVolumeFlowUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case StandardVolumeFlowUnit.StandardCubicCentimeterPerMinute: return baseUnitValue*6e7;
                case StandardVolumeFlowUnit.StandardCubicFootPerHour: return baseUnitValue/7.8657907199999087346816086183876e-6;
                case StandardVolumeFlowUnit.StandardCubicFootPerMinute: return baseUnitValue*2118.88000326;
                case StandardVolumeFlowUnit.StandardCubicFootPerSecond: return baseUnitValue*35.314666721;
                case StandardVolumeFlowUnit.StandardCubicMeterPerDay: return baseUnitValue*86400;
                case StandardVolumeFlowUnit.StandardCubicMeterPerHour: return baseUnitValue*3600;
                case StandardVolumeFlowUnit.StandardCubicMeterPerMinute: return baseUnitValue*60;
                case StandardVolumeFlowUnit.StandardCubicMeterPerSecond: return baseUnitValue;
                case StandardVolumeFlowUnit.StandardLiterPerMinute: return baseUnitValue*60000;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

