//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     https://en.wikipedia.org/wiki/Stiffness#Rotational_stiffness
    /// </summary>
    public struct  RotationalStiffness
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly RotationalStiffnessUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public RotationalStiffnessUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public RotationalStiffness(double value, RotationalStiffnessUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static RotationalStiffnessUnit BaseUnit { get; } = RotationalStiffnessUnit.NewtonMeterPerRadian;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static RotationalStiffness MaxValue { get; } = new RotationalStiffness(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static RotationalStiffness MinValue { get; } = new RotationalStiffness(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static RotationalStiffness Zero { get; } = new RotationalStiffness(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get RotationalStiffness in CentinewtonMetersPerDegree.
        /// </summary>
        public double CentinewtonMetersPerDegree => As(RotationalStiffnessUnit.CentinewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in CentinewtonMillimetersPerDegree.
        /// </summary>
        public double CentinewtonMillimetersPerDegree => As(RotationalStiffnessUnit.CentinewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in CentinewtonMillimetersPerRadian.
        /// </summary>
        public double CentinewtonMillimetersPerRadian => As(RotationalStiffnessUnit.CentinewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in DecanewtonMetersPerDegree.
        /// </summary>
        public double DecanewtonMetersPerDegree => As(RotationalStiffnessUnit.DecanewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in DecanewtonMillimetersPerDegree.
        /// </summary>
        public double DecanewtonMillimetersPerDegree => As(RotationalStiffnessUnit.DecanewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in DecanewtonMillimetersPerRadian.
        /// </summary>
        public double DecanewtonMillimetersPerRadian => As(RotationalStiffnessUnit.DecanewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in DecinewtonMetersPerDegree.
        /// </summary>
        public double DecinewtonMetersPerDegree => As(RotationalStiffnessUnit.DecinewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in DecinewtonMillimetersPerDegree.
        /// </summary>
        public double DecinewtonMillimetersPerDegree => As(RotationalStiffnessUnit.DecinewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in DecinewtonMillimetersPerRadian.
        /// </summary>
        public double DecinewtonMillimetersPerRadian => As(RotationalStiffnessUnit.DecinewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in KilonewtonMetersPerDegree.
        /// </summary>
        public double KilonewtonMetersPerDegree => As(RotationalStiffnessUnit.KilonewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in KilonewtonMetersPerRadian.
        /// </summary>
        public double KilonewtonMetersPerRadian => As(RotationalStiffnessUnit.KilonewtonMeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in KilonewtonMillimetersPerDegree.
        /// </summary>
        public double KilonewtonMillimetersPerDegree => As(RotationalStiffnessUnit.KilonewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in KilonewtonMillimetersPerRadian.
        /// </summary>
        public double KilonewtonMillimetersPerRadian => As(RotationalStiffnessUnit.KilonewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in KilopoundForceFeetPerDegrees.
        /// </summary>
        public double KilopoundForceFeetPerDegrees => As(RotationalStiffnessUnit.KilopoundForceFootPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in MeganewtonMetersPerDegree.
        /// </summary>
        public double MeganewtonMetersPerDegree => As(RotationalStiffnessUnit.MeganewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in MeganewtonMetersPerRadian.
        /// </summary>
        public double MeganewtonMetersPerRadian => As(RotationalStiffnessUnit.MeganewtonMeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in MeganewtonMillimetersPerDegree.
        /// </summary>
        public double MeganewtonMillimetersPerDegree => As(RotationalStiffnessUnit.MeganewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in MeganewtonMillimetersPerRadian.
        /// </summary>
        public double MeganewtonMillimetersPerRadian => As(RotationalStiffnessUnit.MeganewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in MicronewtonMetersPerDegree.
        /// </summary>
        public double MicronewtonMetersPerDegree => As(RotationalStiffnessUnit.MicronewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in MicronewtonMillimetersPerDegree.
        /// </summary>
        public double MicronewtonMillimetersPerDegree => As(RotationalStiffnessUnit.MicronewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in MicronewtonMillimetersPerRadian.
        /// </summary>
        public double MicronewtonMillimetersPerRadian => As(RotationalStiffnessUnit.MicronewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in MillinewtonMetersPerDegree.
        /// </summary>
        public double MillinewtonMetersPerDegree => As(RotationalStiffnessUnit.MillinewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in MillinewtonMillimetersPerDegree.
        /// </summary>
        public double MillinewtonMillimetersPerDegree => As(RotationalStiffnessUnit.MillinewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in MillinewtonMillimetersPerRadian.
        /// </summary>
        public double MillinewtonMillimetersPerRadian => As(RotationalStiffnessUnit.MillinewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in NanonewtonMetersPerDegree.
        /// </summary>
        public double NanonewtonMetersPerDegree => As(RotationalStiffnessUnit.NanonewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in NanonewtonMillimetersPerDegree.
        /// </summary>
        public double NanonewtonMillimetersPerDegree => As(RotationalStiffnessUnit.NanonewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in NanonewtonMillimetersPerRadian.
        /// </summary>
        public double NanonewtonMillimetersPerRadian => As(RotationalStiffnessUnit.NanonewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in NewtonMetersPerDegree.
        /// </summary>
        public double NewtonMetersPerDegree => As(RotationalStiffnessUnit.NewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in NewtonMetersPerRadian.
        /// </summary>
        public double NewtonMetersPerRadian => As(RotationalStiffnessUnit.NewtonMeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in NewtonMillimetersPerDegree.
        /// </summary>
        public double NewtonMillimetersPerDegree => As(RotationalStiffnessUnit.NewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness in NewtonMillimetersPerRadian.
        /// </summary>
        public double NewtonMillimetersPerRadian => As(RotationalStiffnessUnit.NewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in PoundForceFeetPerRadian.
        /// </summary>
        public double PoundForceFeetPerRadian => As(RotationalStiffnessUnit.PoundForceFeetPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in PoundForceFeetPerDegrees.
        /// </summary>
        public double PoundForceFeetPerDegrees => As(RotationalStiffnessUnit.PoundForceFootPerDegrees);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get RotationalStiffness from CentinewtonMetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromCentinewtonMetersPerDegree(double centinewtonmetersperdegree) => new RotationalStiffness(centinewtonmetersperdegree, RotationalStiffnessUnit.CentinewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from CentinewtonMillimetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromCentinewtonMillimetersPerDegree(double centinewtonmillimetersperdegree) => new RotationalStiffness(centinewtonmillimetersperdegree, RotationalStiffnessUnit.CentinewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from CentinewtonMillimetersPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromCentinewtonMillimetersPerRadian(double centinewtonmillimetersperradian) => new RotationalStiffness(centinewtonmillimetersperradian, RotationalStiffnessUnit.CentinewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness from DecanewtonMetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromDecanewtonMetersPerDegree(double decanewtonmetersperdegree) => new RotationalStiffness(decanewtonmetersperdegree, RotationalStiffnessUnit.DecanewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from DecanewtonMillimetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromDecanewtonMillimetersPerDegree(double decanewtonmillimetersperdegree) => new RotationalStiffness(decanewtonmillimetersperdegree, RotationalStiffnessUnit.DecanewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from DecanewtonMillimetersPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromDecanewtonMillimetersPerRadian(double decanewtonmillimetersperradian) => new RotationalStiffness(decanewtonmillimetersperradian, RotationalStiffnessUnit.DecanewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness from DecinewtonMetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromDecinewtonMetersPerDegree(double decinewtonmetersperdegree) => new RotationalStiffness(decinewtonmetersperdegree, RotationalStiffnessUnit.DecinewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from DecinewtonMillimetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromDecinewtonMillimetersPerDegree(double decinewtonmillimetersperdegree) => new RotationalStiffness(decinewtonmillimetersperdegree, RotationalStiffnessUnit.DecinewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from DecinewtonMillimetersPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromDecinewtonMillimetersPerRadian(double decinewtonmillimetersperradian) => new RotationalStiffness(decinewtonmillimetersperradian, RotationalStiffnessUnit.DecinewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness from KilonewtonMetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromKilonewtonMetersPerDegree(double kilonewtonmetersperdegree) => new RotationalStiffness(kilonewtonmetersperdegree, RotationalStiffnessUnit.KilonewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from KilonewtonMetersPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromKilonewtonMetersPerRadian(double kilonewtonmetersperradian) => new RotationalStiffness(kilonewtonmetersperradian, RotationalStiffnessUnit.KilonewtonMeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness from KilonewtonMillimetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromKilonewtonMillimetersPerDegree(double kilonewtonmillimetersperdegree) => new RotationalStiffness(kilonewtonmillimetersperdegree, RotationalStiffnessUnit.KilonewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from KilonewtonMillimetersPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromKilonewtonMillimetersPerRadian(double kilonewtonmillimetersperradian) => new RotationalStiffness(kilonewtonmillimetersperradian, RotationalStiffnessUnit.KilonewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness from KilopoundForceFeetPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromKilopoundForceFeetPerDegrees(double kilopoundforcefeetperdegrees) => new RotationalStiffness(kilopoundforcefeetperdegrees, RotationalStiffnessUnit.KilopoundForceFootPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness from MeganewtonMetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMeganewtonMetersPerDegree(double meganewtonmetersperdegree) => new RotationalStiffness(meganewtonmetersperdegree, RotationalStiffnessUnit.MeganewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from MeganewtonMetersPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMeganewtonMetersPerRadian(double meganewtonmetersperradian) => new RotationalStiffness(meganewtonmetersperradian, RotationalStiffnessUnit.MeganewtonMeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness from MeganewtonMillimetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMeganewtonMillimetersPerDegree(double meganewtonmillimetersperdegree) => new RotationalStiffness(meganewtonmillimetersperdegree, RotationalStiffnessUnit.MeganewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from MeganewtonMillimetersPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMeganewtonMillimetersPerRadian(double meganewtonmillimetersperradian) => new RotationalStiffness(meganewtonmillimetersperradian, RotationalStiffnessUnit.MeganewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness from MicronewtonMetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMicronewtonMetersPerDegree(double micronewtonmetersperdegree) => new RotationalStiffness(micronewtonmetersperdegree, RotationalStiffnessUnit.MicronewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from MicronewtonMillimetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMicronewtonMillimetersPerDegree(double micronewtonmillimetersperdegree) => new RotationalStiffness(micronewtonmillimetersperdegree, RotationalStiffnessUnit.MicronewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from MicronewtonMillimetersPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMicronewtonMillimetersPerRadian(double micronewtonmillimetersperradian) => new RotationalStiffness(micronewtonmillimetersperradian, RotationalStiffnessUnit.MicronewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness from MillinewtonMetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMillinewtonMetersPerDegree(double millinewtonmetersperdegree) => new RotationalStiffness(millinewtonmetersperdegree, RotationalStiffnessUnit.MillinewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from MillinewtonMillimetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMillinewtonMillimetersPerDegree(double millinewtonmillimetersperdegree) => new RotationalStiffness(millinewtonmillimetersperdegree, RotationalStiffnessUnit.MillinewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from MillinewtonMillimetersPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMillinewtonMillimetersPerRadian(double millinewtonmillimetersperradian) => new RotationalStiffness(millinewtonmillimetersperradian, RotationalStiffnessUnit.MillinewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness from NanonewtonMetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromNanonewtonMetersPerDegree(double nanonewtonmetersperdegree) => new RotationalStiffness(nanonewtonmetersperdegree, RotationalStiffnessUnit.NanonewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from NanonewtonMillimetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromNanonewtonMillimetersPerDegree(double nanonewtonmillimetersperdegree) => new RotationalStiffness(nanonewtonmillimetersperdegree, RotationalStiffnessUnit.NanonewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from NanonewtonMillimetersPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromNanonewtonMillimetersPerRadian(double nanonewtonmillimetersperradian) => new RotationalStiffness(nanonewtonmillimetersperradian, RotationalStiffnessUnit.NanonewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness from NewtonMetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromNewtonMetersPerDegree(double newtonmetersperdegree) => new RotationalStiffness(newtonmetersperdegree, RotationalStiffnessUnit.NewtonMeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from NewtonMetersPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromNewtonMetersPerRadian(double newtonmetersperradian) => new RotationalStiffness(newtonmetersperradian, RotationalStiffnessUnit.NewtonMeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness from NewtonMillimetersPerDegree.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromNewtonMillimetersPerDegree(double newtonmillimetersperdegree) => new RotationalStiffness(newtonmillimetersperdegree, RotationalStiffnessUnit.NewtonMillimeterPerDegree);

        /// <summary>
        ///     Get RotationalStiffness from NewtonMillimetersPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromNewtonMillimetersPerRadian(double newtonmillimetersperradian) => new RotationalStiffness(newtonmillimetersperradian, RotationalStiffnessUnit.NewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness from PoundForceFeetPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromPoundForceFeetPerRadian(double poundforcefeetperradian) => new RotationalStiffness(poundforcefeetperradian, RotationalStiffnessUnit.PoundForceFeetPerRadian);

        /// <summary>
        ///     Get RotationalStiffness from PoundForceFeetPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromPoundForceFeetPerDegrees(double poundforcefeetperdegrees) => new RotationalStiffness(poundforcefeetperdegrees, RotationalStiffnessUnit.PoundForceFootPerDegrees);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="RotationalStiffnessUnit" /> to <see cref="RotationalStiffness" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>RotationalStiffness unit value.</returns>
        public static RotationalStiffness From(double value, RotationalStiffnessUnit fromUnit)
        {
            return new RotationalStiffness(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(RotationalStiffnessUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public RotationalStiffness ToUnit(RotationalStiffnessUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new RotationalStiffness(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case RotationalStiffnessUnit.CentinewtonMeterPerDegree: return (_value*(180/3.1415926535897931)) * 1e-2d;
                case RotationalStiffnessUnit.CentinewtonMillimeterPerDegree: return (_value*180/3.1415926535897931*0.001) * 1e-2d;
                case RotationalStiffnessUnit.CentinewtonMillimeterPerRadian: return (_value*0.001) * 1e-2d;
                case RotationalStiffnessUnit.DecanewtonMeterPerDegree: return (_value*(180/3.1415926535897931)) * 1e1d;
                case RotationalStiffnessUnit.DecanewtonMillimeterPerDegree: return (_value*180/3.1415926535897931*0.001) * 1e1d;
                case RotationalStiffnessUnit.DecanewtonMillimeterPerRadian: return (_value*0.001) * 1e1d;
                case RotationalStiffnessUnit.DecinewtonMeterPerDegree: return (_value*(180/3.1415926535897931)) * 1e-1d;
                case RotationalStiffnessUnit.DecinewtonMillimeterPerDegree: return (_value*180/3.1415926535897931*0.001) * 1e-1d;
                case RotationalStiffnessUnit.DecinewtonMillimeterPerRadian: return (_value*0.001) * 1e-1d;
                case RotationalStiffnessUnit.KilonewtonMeterPerDegree: return (_value*(180/3.1415926535897931)) * 1e3d;
                case RotationalStiffnessUnit.KilonewtonMeterPerRadian: return (_value) * 1e3d;
                case RotationalStiffnessUnit.KilonewtonMillimeterPerDegree: return (_value*180/3.1415926535897931*0.001) * 1e3d;
                case RotationalStiffnessUnit.KilonewtonMillimeterPerRadian: return (_value*0.001) * 1e3d;
                case RotationalStiffnessUnit.KilopoundForceFootPerDegrees: return _value*77682.6;
                case RotationalStiffnessUnit.MeganewtonMeterPerDegree: return (_value*(180/3.1415926535897931)) * 1e6d;
                case RotationalStiffnessUnit.MeganewtonMeterPerRadian: return (_value) * 1e6d;
                case RotationalStiffnessUnit.MeganewtonMillimeterPerDegree: return (_value*180/3.1415926535897931*0.001) * 1e6d;
                case RotationalStiffnessUnit.MeganewtonMillimeterPerRadian: return (_value*0.001) * 1e6d;
                case RotationalStiffnessUnit.MicronewtonMeterPerDegree: return (_value*(180/3.1415926535897931)) * 1e-6d;
                case RotationalStiffnessUnit.MicronewtonMillimeterPerDegree: return (_value*180/3.1415926535897931*0.001) * 1e-6d;
                case RotationalStiffnessUnit.MicronewtonMillimeterPerRadian: return (_value*0.001) * 1e-6d;
                case RotationalStiffnessUnit.MillinewtonMeterPerDegree: return (_value*(180/3.1415926535897931)) * 1e-3d;
                case RotationalStiffnessUnit.MillinewtonMillimeterPerDegree: return (_value*180/3.1415926535897931*0.001) * 1e-3d;
                case RotationalStiffnessUnit.MillinewtonMillimeterPerRadian: return (_value*0.001) * 1e-3d;
                case RotationalStiffnessUnit.NanonewtonMeterPerDegree: return (_value*(180/3.1415926535897931)) * 1e-9d;
                case RotationalStiffnessUnit.NanonewtonMillimeterPerDegree: return (_value*180/3.1415926535897931*0.001) * 1e-9d;
                case RotationalStiffnessUnit.NanonewtonMillimeterPerRadian: return (_value*0.001) * 1e-9d;
                case RotationalStiffnessUnit.NewtonMeterPerDegree: return _value*(180/3.1415926535897931);
                case RotationalStiffnessUnit.NewtonMeterPerRadian: return _value;
                case RotationalStiffnessUnit.NewtonMillimeterPerDegree: return _value*180/3.1415926535897931*0.001;
                case RotationalStiffnessUnit.NewtonMillimeterPerRadian: return _value*0.001;
                case RotationalStiffnessUnit.PoundForceFeetPerRadian: return _value*1.3558179483314;
                case RotationalStiffnessUnit.PoundForceFootPerDegrees: return _value*77.6826;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(RotationalStiffnessUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case RotationalStiffnessUnit.CentinewtonMeterPerDegree: return (baseUnitValue/(180/3.1415926535897931)) / 1e-2d;
                case RotationalStiffnessUnit.CentinewtonMillimeterPerDegree: return (baseUnitValue/180*3.1415926535897931*1000) / 1e-2d;
                case RotationalStiffnessUnit.CentinewtonMillimeterPerRadian: return (baseUnitValue*1000) / 1e-2d;
                case RotationalStiffnessUnit.DecanewtonMeterPerDegree: return (baseUnitValue/(180/3.1415926535897931)) / 1e1d;
                case RotationalStiffnessUnit.DecanewtonMillimeterPerDegree: return (baseUnitValue/180*3.1415926535897931*1000) / 1e1d;
                case RotationalStiffnessUnit.DecanewtonMillimeterPerRadian: return (baseUnitValue*1000) / 1e1d;
                case RotationalStiffnessUnit.DecinewtonMeterPerDegree: return (baseUnitValue/(180/3.1415926535897931)) / 1e-1d;
                case RotationalStiffnessUnit.DecinewtonMillimeterPerDegree: return (baseUnitValue/180*3.1415926535897931*1000) / 1e-1d;
                case RotationalStiffnessUnit.DecinewtonMillimeterPerRadian: return (baseUnitValue*1000) / 1e-1d;
                case RotationalStiffnessUnit.KilonewtonMeterPerDegree: return (baseUnitValue/(180/3.1415926535897931)) / 1e3d;
                case RotationalStiffnessUnit.KilonewtonMeterPerRadian: return (baseUnitValue) / 1e3d;
                case RotationalStiffnessUnit.KilonewtonMillimeterPerDegree: return (baseUnitValue/180*3.1415926535897931*1000) / 1e3d;
                case RotationalStiffnessUnit.KilonewtonMillimeterPerRadian: return (baseUnitValue*1000) / 1e3d;
                case RotationalStiffnessUnit.KilopoundForceFootPerDegrees: return baseUnitValue/77682.6;
                case RotationalStiffnessUnit.MeganewtonMeterPerDegree: return (baseUnitValue/(180/3.1415926535897931)) / 1e6d;
                case RotationalStiffnessUnit.MeganewtonMeterPerRadian: return (baseUnitValue) / 1e6d;
                case RotationalStiffnessUnit.MeganewtonMillimeterPerDegree: return (baseUnitValue/180*3.1415926535897931*1000) / 1e6d;
                case RotationalStiffnessUnit.MeganewtonMillimeterPerRadian: return (baseUnitValue*1000) / 1e6d;
                case RotationalStiffnessUnit.MicronewtonMeterPerDegree: return (baseUnitValue/(180/3.1415926535897931)) / 1e-6d;
                case RotationalStiffnessUnit.MicronewtonMillimeterPerDegree: return (baseUnitValue/180*3.1415926535897931*1000) / 1e-6d;
                case RotationalStiffnessUnit.MicronewtonMillimeterPerRadian: return (baseUnitValue*1000) / 1e-6d;
                case RotationalStiffnessUnit.MillinewtonMeterPerDegree: return (baseUnitValue/(180/3.1415926535897931)) / 1e-3d;
                case RotationalStiffnessUnit.MillinewtonMillimeterPerDegree: return (baseUnitValue/180*3.1415926535897931*1000) / 1e-3d;
                case RotationalStiffnessUnit.MillinewtonMillimeterPerRadian: return (baseUnitValue*1000) / 1e-3d;
                case RotationalStiffnessUnit.NanonewtonMeterPerDegree: return (baseUnitValue/(180/3.1415926535897931)) / 1e-9d;
                case RotationalStiffnessUnit.NanonewtonMillimeterPerDegree: return (baseUnitValue/180*3.1415926535897931*1000) / 1e-9d;
                case RotationalStiffnessUnit.NanonewtonMillimeterPerRadian: return (baseUnitValue*1000) / 1e-9d;
                case RotationalStiffnessUnit.NewtonMeterPerDegree: return baseUnitValue/(180/3.1415926535897931);
                case RotationalStiffnessUnit.NewtonMeterPerRadian: return baseUnitValue;
                case RotationalStiffnessUnit.NewtonMillimeterPerDegree: return baseUnitValue/180*3.1415926535897931*1000;
                case RotationalStiffnessUnit.NewtonMillimeterPerRadian: return baseUnitValue*1000;
                case RotationalStiffnessUnit.PoundForceFeetPerRadian: return baseUnitValue/1.3558179483314;
                case RotationalStiffnessUnit.PoundForceFootPerDegrees: return baseUnitValue/77.6826;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

