//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The Linear Power Density of a substance is its power per unit length.  The term linear density is most often used when describing the characteristics of one-dimensional objects, although linear density can also be used to describe the density of a three-dimensional quantity along one particular dimension.
    /// </summary>
    /// <remarks>
    ///     http://en.wikipedia.org/wiki/Linear_density
    /// </remarks>
    public partial struct LinearPowerDensity : IQuantity<LinearPowerDensityUnit>, IEquatable<LinearPowerDensity>, IComparable, IComparable<LinearPowerDensity>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly LinearPowerDensityUnit? _unit;

        static LinearPowerDensity()
        {
            BaseDimensions = new BaseDimensions(1, 1, -3, 0, 0, 0, 0);

            Info = new QuantityInfo<LinearPowerDensityUnit>("LinearPowerDensity",
                new UnitInfo<LinearPowerDensityUnit>[] {
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.GigawattPerCentimeter, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.GigawattPerFoot, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.GigawattPerInch, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.GigawattPerMeter, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.GigawattPerMillimeter, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.KilowattPerCentimeter, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.KilowattPerFoot, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.KilowattPerInch, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.KilowattPerMeter, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.KilowattPerMillimeter, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.MegawattPerCentimeter, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.MegawattPerFoot, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.MegawattPerInch, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.MegawattPerMeter, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.MegawattPerMillimeter, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.MilliwattPerCentimeter, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.MilliwattPerFoot, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.MilliwattPerInch, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.MilliwattPerMeter, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.MilliwattPerMillimeter, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.WattPerCentimeter, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.WattPerFoot, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.WattPerInch, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.WattPerMeter, BaseUnits.Undefined),
                    new UnitInfo<LinearPowerDensityUnit>(LinearPowerDensityUnit.WattPerMillimeter, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions, QuantityType.LinearPowerDensity);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public LinearPowerDensity(double value, LinearPowerDensityUnit unit)
        {
            if(unit == LinearPowerDensityUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public LinearPowerDensity(double value, UnitSystem unitSystem)
        {
            if(unitSystem is null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<LinearPowerDensityUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of LinearPowerDensity, which is WattPerMeter. All conversions go via this value.
        /// </summary>
        public static LinearPowerDensityUnit BaseUnit { get; } = LinearPowerDensityUnit.WattPerMeter;

        /// <summary>
        /// Represents the largest possible value of LinearPowerDensity
        /// </summary>
        [Obsolete("MaxValue and MinValue will be removed. Choose your own value or use nullability for unbounded lower/upper range checks. See discussion in https://github.com/angularsen/UnitsNet/issues/848.")]
        public static LinearPowerDensity MaxValue { get; } = new LinearPowerDensity(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of LinearPowerDensity
        /// </summary>
        [Obsolete("MaxValue and MinValue will be removed. Choose your own value or use nullability for unbounded lower/upper range checks. See discussion in https://github.com/angularsen/UnitsNet/issues/848.")]
        public static LinearPowerDensity MinValue { get; } = new LinearPowerDensity(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use Info property instead.")]
        public static QuantityType QuantityType { get; } = QuantityType.LinearPowerDensity;

        /// <summary>
        ///     All units of measurement for the LinearPowerDensity quantity.
        /// </summary>
        public static LinearPowerDensityUnit[] Units { get; } = Enum.GetValues(typeof(LinearPowerDensityUnit)).Cast<LinearPowerDensityUnit>().Except(new LinearPowerDensityUnit[]{ LinearPowerDensityUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit WattPerMeter.
        /// </summary>
        public static LinearPowerDensity Zero { get; } = new LinearPowerDensity(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public LinearPowerDensityUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<LinearPowerDensityUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => LinearPowerDensity.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => LinearPowerDensity.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get LinearPowerDensity in GigawattsPerCentimeter.
        /// </summary>
        public double GigawattsPerCentimeter => As(LinearPowerDensityUnit.GigawattPerCentimeter);

        /// <summary>
        ///     Get LinearPowerDensity in GigawattsPerFoot.
        /// </summary>
        public double GigawattsPerFoot => As(LinearPowerDensityUnit.GigawattPerFoot);

        /// <summary>
        ///     Get LinearPowerDensity in GigawattsPerInch.
        /// </summary>
        public double GigawattsPerInch => As(LinearPowerDensityUnit.GigawattPerInch);

        /// <summary>
        ///     Get LinearPowerDensity in GigawattsPerMeter.
        /// </summary>
        public double GigawattsPerMeter => As(LinearPowerDensityUnit.GigawattPerMeter);

        /// <summary>
        ///     Get LinearPowerDensity in GigawattsPerMillimeter.
        /// </summary>
        public double GigawattsPerMillimeter => As(LinearPowerDensityUnit.GigawattPerMillimeter);

        /// <summary>
        ///     Get LinearPowerDensity in KilowattsPerCentimeter.
        /// </summary>
        public double KilowattsPerCentimeter => As(LinearPowerDensityUnit.KilowattPerCentimeter);

        /// <summary>
        ///     Get LinearPowerDensity in KilowattsPerFoot.
        /// </summary>
        public double KilowattsPerFoot => As(LinearPowerDensityUnit.KilowattPerFoot);

        /// <summary>
        ///     Get LinearPowerDensity in KilowattsPerInch.
        /// </summary>
        public double KilowattsPerInch => As(LinearPowerDensityUnit.KilowattPerInch);

        /// <summary>
        ///     Get LinearPowerDensity in KilowattsPerMeter.
        /// </summary>
        public double KilowattsPerMeter => As(LinearPowerDensityUnit.KilowattPerMeter);

        /// <summary>
        ///     Get LinearPowerDensity in KilowattsPerMillimeter.
        /// </summary>
        public double KilowattsPerMillimeter => As(LinearPowerDensityUnit.KilowattPerMillimeter);

        /// <summary>
        ///     Get LinearPowerDensity in MegawattsPerCentimeter.
        /// </summary>
        public double MegawattsPerCentimeter => As(LinearPowerDensityUnit.MegawattPerCentimeter);

        /// <summary>
        ///     Get LinearPowerDensity in MegawattsPerFoot.
        /// </summary>
        public double MegawattsPerFoot => As(LinearPowerDensityUnit.MegawattPerFoot);

        /// <summary>
        ///     Get LinearPowerDensity in MegawattsPerInch.
        /// </summary>
        public double MegawattsPerInch => As(LinearPowerDensityUnit.MegawattPerInch);

        /// <summary>
        ///     Get LinearPowerDensity in MegawattsPerMeter.
        /// </summary>
        public double MegawattsPerMeter => As(LinearPowerDensityUnit.MegawattPerMeter);

        /// <summary>
        ///     Get LinearPowerDensity in MegawattsPerMillimeter.
        /// </summary>
        public double MegawattsPerMillimeter => As(LinearPowerDensityUnit.MegawattPerMillimeter);

        /// <summary>
        ///     Get LinearPowerDensity in MilliwattsPerCentimeter.
        /// </summary>
        public double MilliwattsPerCentimeter => As(LinearPowerDensityUnit.MilliwattPerCentimeter);

        /// <summary>
        ///     Get LinearPowerDensity in MilliwattsPerFoot.
        /// </summary>
        public double MilliwattsPerFoot => As(LinearPowerDensityUnit.MilliwattPerFoot);

        /// <summary>
        ///     Get LinearPowerDensity in MilliwattsPerInch.
        /// </summary>
        public double MilliwattsPerInch => As(LinearPowerDensityUnit.MilliwattPerInch);

        /// <summary>
        ///     Get LinearPowerDensity in MilliwattsPerMeter.
        /// </summary>
        public double MilliwattsPerMeter => As(LinearPowerDensityUnit.MilliwattPerMeter);

        /// <summary>
        ///     Get LinearPowerDensity in MilliwattsPerMillimeter.
        /// </summary>
        public double MilliwattsPerMillimeter => As(LinearPowerDensityUnit.MilliwattPerMillimeter);

        /// <summary>
        ///     Get LinearPowerDensity in WattsPerCentimeter.
        /// </summary>
        public double WattsPerCentimeter => As(LinearPowerDensityUnit.WattPerCentimeter);

        /// <summary>
        ///     Get LinearPowerDensity in WattsPerFoot.
        /// </summary>
        public double WattsPerFoot => As(LinearPowerDensityUnit.WattPerFoot);

        /// <summary>
        ///     Get LinearPowerDensity in WattsPerInch.
        /// </summary>
        public double WattsPerInch => As(LinearPowerDensityUnit.WattPerInch);

        /// <summary>
        ///     Get LinearPowerDensity in WattsPerMeter.
        /// </summary>
        public double WattsPerMeter => As(LinearPowerDensityUnit.WattPerMeter);

        /// <summary>
        ///     Get LinearPowerDensity in WattsPerMillimeter.
        /// </summary>
        public double WattsPerMillimeter => As(LinearPowerDensityUnit.WattPerMillimeter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(LinearPowerDensityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(LinearPowerDensityUnit unit, IFormatProvider? provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get LinearPowerDensity from GigawattsPerCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromGigawattsPerCentimeter(QuantityValue gigawattspercentimeter)
        {
            double value = (double) gigawattspercentimeter;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.GigawattPerCentimeter);
        }
        /// <summary>
        ///     Get LinearPowerDensity from GigawattsPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromGigawattsPerFoot(QuantityValue gigawattsperfoot)
        {
            double value = (double) gigawattsperfoot;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.GigawattPerFoot);
        }
        /// <summary>
        ///     Get LinearPowerDensity from GigawattsPerInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromGigawattsPerInch(QuantityValue gigawattsperinch)
        {
            double value = (double) gigawattsperinch;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.GigawattPerInch);
        }
        /// <summary>
        ///     Get LinearPowerDensity from GigawattsPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromGigawattsPerMeter(QuantityValue gigawattspermeter)
        {
            double value = (double) gigawattspermeter;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.GigawattPerMeter);
        }
        /// <summary>
        ///     Get LinearPowerDensity from GigawattsPerMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromGigawattsPerMillimeter(QuantityValue gigawattspermillimeter)
        {
            double value = (double) gigawattspermillimeter;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.GigawattPerMillimeter);
        }
        /// <summary>
        ///     Get LinearPowerDensity from KilowattsPerCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromKilowattsPerCentimeter(QuantityValue kilowattspercentimeter)
        {
            double value = (double) kilowattspercentimeter;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.KilowattPerCentimeter);
        }
        /// <summary>
        ///     Get LinearPowerDensity from KilowattsPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromKilowattsPerFoot(QuantityValue kilowattsperfoot)
        {
            double value = (double) kilowattsperfoot;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.KilowattPerFoot);
        }
        /// <summary>
        ///     Get LinearPowerDensity from KilowattsPerInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromKilowattsPerInch(QuantityValue kilowattsperinch)
        {
            double value = (double) kilowattsperinch;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.KilowattPerInch);
        }
        /// <summary>
        ///     Get LinearPowerDensity from KilowattsPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromKilowattsPerMeter(QuantityValue kilowattspermeter)
        {
            double value = (double) kilowattspermeter;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.KilowattPerMeter);
        }
        /// <summary>
        ///     Get LinearPowerDensity from KilowattsPerMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromKilowattsPerMillimeter(QuantityValue kilowattspermillimeter)
        {
            double value = (double) kilowattspermillimeter;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.KilowattPerMillimeter);
        }
        /// <summary>
        ///     Get LinearPowerDensity from MegawattsPerCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMegawattsPerCentimeter(QuantityValue megawattspercentimeter)
        {
            double value = (double) megawattspercentimeter;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.MegawattPerCentimeter);
        }
        /// <summary>
        ///     Get LinearPowerDensity from MegawattsPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMegawattsPerFoot(QuantityValue megawattsperfoot)
        {
            double value = (double) megawattsperfoot;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.MegawattPerFoot);
        }
        /// <summary>
        ///     Get LinearPowerDensity from MegawattsPerInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMegawattsPerInch(QuantityValue megawattsperinch)
        {
            double value = (double) megawattsperinch;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.MegawattPerInch);
        }
        /// <summary>
        ///     Get LinearPowerDensity from MegawattsPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMegawattsPerMeter(QuantityValue megawattspermeter)
        {
            double value = (double) megawattspermeter;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.MegawattPerMeter);
        }
        /// <summary>
        ///     Get LinearPowerDensity from MegawattsPerMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMegawattsPerMillimeter(QuantityValue megawattspermillimeter)
        {
            double value = (double) megawattspermillimeter;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.MegawattPerMillimeter);
        }
        /// <summary>
        ///     Get LinearPowerDensity from MilliwattsPerCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMilliwattsPerCentimeter(QuantityValue milliwattspercentimeter)
        {
            double value = (double) milliwattspercentimeter;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.MilliwattPerCentimeter);
        }
        /// <summary>
        ///     Get LinearPowerDensity from MilliwattsPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMilliwattsPerFoot(QuantityValue milliwattsperfoot)
        {
            double value = (double) milliwattsperfoot;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.MilliwattPerFoot);
        }
        /// <summary>
        ///     Get LinearPowerDensity from MilliwattsPerInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMilliwattsPerInch(QuantityValue milliwattsperinch)
        {
            double value = (double) milliwattsperinch;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.MilliwattPerInch);
        }
        /// <summary>
        ///     Get LinearPowerDensity from MilliwattsPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMilliwattsPerMeter(QuantityValue milliwattspermeter)
        {
            double value = (double) milliwattspermeter;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.MilliwattPerMeter);
        }
        /// <summary>
        ///     Get LinearPowerDensity from MilliwattsPerMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromMilliwattsPerMillimeter(QuantityValue milliwattspermillimeter)
        {
            double value = (double) milliwattspermillimeter;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.MilliwattPerMillimeter);
        }
        /// <summary>
        ///     Get LinearPowerDensity from WattsPerCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromWattsPerCentimeter(QuantityValue wattspercentimeter)
        {
            double value = (double) wattspercentimeter;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.WattPerCentimeter);
        }
        /// <summary>
        ///     Get LinearPowerDensity from WattsPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromWattsPerFoot(QuantityValue wattsperfoot)
        {
            double value = (double) wattsperfoot;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.WattPerFoot);
        }
        /// <summary>
        ///     Get LinearPowerDensity from WattsPerInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromWattsPerInch(QuantityValue wattsperinch)
        {
            double value = (double) wattsperinch;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.WattPerInch);
        }
        /// <summary>
        ///     Get LinearPowerDensity from WattsPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromWattsPerMeter(QuantityValue wattspermeter)
        {
            double value = (double) wattspermeter;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.WattPerMeter);
        }
        /// <summary>
        ///     Get LinearPowerDensity from WattsPerMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static LinearPowerDensity FromWattsPerMillimeter(QuantityValue wattspermillimeter)
        {
            double value = (double) wattspermillimeter;
            return new LinearPowerDensity(value, LinearPowerDensityUnit.WattPerMillimeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="LinearPowerDensityUnit" /> to <see cref="LinearPowerDensity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>LinearPowerDensity unit value.</returns>
        public static LinearPowerDensity From(QuantityValue value, LinearPowerDensityUnit fromUnit)
        {
            return new LinearPowerDensity((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static LinearPowerDensity Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static LinearPowerDensity Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<LinearPowerDensity, LinearPowerDensityUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(string? str, out LinearPowerDensity result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse(string? str, IFormatProvider? provider, out LinearPowerDensity result)
        {
            return QuantityParser.Default.TryParse<LinearPowerDensity, LinearPowerDensityUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static LinearPowerDensityUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static LinearPowerDensityUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse<LinearPowerDensityUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.LinearPowerDensityUnit)"/>
        public static bool TryParseUnit(string str, out LinearPowerDensityUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider? provider, out LinearPowerDensityUnit unit)
        {
            return UnitParser.Default.TryParse<LinearPowerDensityUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static LinearPowerDensity operator -(LinearPowerDensity right)
        {
            return new LinearPowerDensity(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="LinearPowerDensity"/> from adding two <see cref="LinearPowerDensity"/>.</summary>
        public static LinearPowerDensity operator +(LinearPowerDensity left, LinearPowerDensity right)
        {
            return new LinearPowerDensity(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="LinearPowerDensity"/> from subtracting two <see cref="LinearPowerDensity"/>.</summary>
        public static LinearPowerDensity operator -(LinearPowerDensity left, LinearPowerDensity right)
        {
            return new LinearPowerDensity(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="LinearPowerDensity"/> from multiplying value and <see cref="LinearPowerDensity"/>.</summary>
        public static LinearPowerDensity operator *(double left, LinearPowerDensity right)
        {
            return new LinearPowerDensity(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="LinearPowerDensity"/> from multiplying value and <see cref="LinearPowerDensity"/>.</summary>
        public static LinearPowerDensity operator *(LinearPowerDensity left, double right)
        {
            return new LinearPowerDensity(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="LinearPowerDensity"/> from dividing <see cref="LinearPowerDensity"/> by value.</summary>
        public static LinearPowerDensity operator /(LinearPowerDensity left, double right)
        {
            return new LinearPowerDensity(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="LinearPowerDensity"/> by <see cref="LinearPowerDensity"/>.</summary>
        public static double operator /(LinearPowerDensity left, LinearPowerDensity right)
        {
            return left.WattsPerMeter / right.WattsPerMeter;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(LinearPowerDensity left, LinearPowerDensity right)
        {
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(LinearPowerDensity left, LinearPowerDensity right)
        {
            return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(LinearPowerDensity left, LinearPowerDensity right)
        {
            return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(LinearPowerDensity left, LinearPowerDensity right)
        {
            return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(LinearPowerDensity, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(LinearPowerDensity left, LinearPowerDensity right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(LinearPowerDensity, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(LinearPowerDensity left, LinearPowerDensity right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is LinearPowerDensity objLinearPowerDensity)) throw new ArgumentException("Expected type LinearPowerDensity.", nameof(obj));

            return CompareTo(objLinearPowerDensity);
        }

        /// <inheritdoc />
        public int CompareTo(LinearPowerDensity other)
        {
            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(LinearPowerDensity, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is LinearPowerDensity objLinearPowerDensity))
                return false;

            return Equals(objLinearPowerDensity);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(LinearPowerDensity, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(LinearPowerDensity other)
        {
            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another LinearPowerDensity within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(LinearPowerDensity other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current LinearPowerDensity.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(LinearPowerDensityUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is LinearPowerDensityUnit unitAsLinearPowerDensityUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(LinearPowerDensityUnit)} is supported.", nameof(unit));

            return As(unitAsLinearPowerDensityUnit);
        }

        /// <summary>
        ///     Converts this LinearPowerDensity to another LinearPowerDensity with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A LinearPowerDensity with the specified unit.</returns>
        public LinearPowerDensity ToUnit(LinearPowerDensityUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new LinearPowerDensity(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is LinearPowerDensityUnit unitAsLinearPowerDensityUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(LinearPowerDensityUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsLinearPowerDensityUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public LinearPowerDensity ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<LinearPowerDensityUnit> IQuantity<LinearPowerDensityUnit>.ToUnit(LinearPowerDensityUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<LinearPowerDensityUnit> IQuantity<LinearPowerDensityUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case LinearPowerDensityUnit.GigawattPerCentimeter: return (_value*1e2) * 1e9d;
                case LinearPowerDensityUnit.GigawattPerFoot: return (_value*3.280839895) * 1e9d;
                case LinearPowerDensityUnit.GigawattPerInch: return (_value*39.37007874) * 1e9d;
                case LinearPowerDensityUnit.GigawattPerMeter: return (_value) * 1e9d;
                case LinearPowerDensityUnit.GigawattPerMillimeter: return (_value*1e3) * 1e9d;
                case LinearPowerDensityUnit.KilowattPerCentimeter: return (_value*1e2) * 1e3d;
                case LinearPowerDensityUnit.KilowattPerFoot: return (_value*3.280839895) * 1e3d;
                case LinearPowerDensityUnit.KilowattPerInch: return (_value*39.37007874) * 1e3d;
                case LinearPowerDensityUnit.KilowattPerMeter: return (_value) * 1e3d;
                case LinearPowerDensityUnit.KilowattPerMillimeter: return (_value*1e3) * 1e3d;
                case LinearPowerDensityUnit.MegawattPerCentimeter: return (_value*1e2) * 1e6d;
                case LinearPowerDensityUnit.MegawattPerFoot: return (_value*3.280839895) * 1e6d;
                case LinearPowerDensityUnit.MegawattPerInch: return (_value*39.37007874) * 1e6d;
                case LinearPowerDensityUnit.MegawattPerMeter: return (_value) * 1e6d;
                case LinearPowerDensityUnit.MegawattPerMillimeter: return (_value*1e3) * 1e6d;
                case LinearPowerDensityUnit.MilliwattPerCentimeter: return (_value*1e2) * 1e-3d;
                case LinearPowerDensityUnit.MilliwattPerFoot: return (_value*3.280839895) * 1e-3d;
                case LinearPowerDensityUnit.MilliwattPerInch: return (_value*39.37007874) * 1e-3d;
                case LinearPowerDensityUnit.MilliwattPerMeter: return (_value) * 1e-3d;
                case LinearPowerDensityUnit.MilliwattPerMillimeter: return (_value*1e3) * 1e-3d;
                case LinearPowerDensityUnit.WattPerCentimeter: return _value*1e2;
                case LinearPowerDensityUnit.WattPerFoot: return _value*3.280839895;
                case LinearPowerDensityUnit.WattPerInch: return _value*39.37007874;
                case LinearPowerDensityUnit.WattPerMeter: return _value;
                case LinearPowerDensityUnit.WattPerMillimeter: return _value*1e3;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        internal LinearPowerDensity ToBaseUnit()
        {
            var baseUnitValue = GetValueInBaseUnit();
            return new LinearPowerDensity(baseUnitValue, BaseUnit);
        }

        private double GetValueAs(LinearPowerDensityUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case LinearPowerDensityUnit.GigawattPerCentimeter: return (baseUnitValue/1e2) / 1e9d;
                case LinearPowerDensityUnit.GigawattPerFoot: return (baseUnitValue/3.280839895) / 1e9d;
                case LinearPowerDensityUnit.GigawattPerInch: return (baseUnitValue/39.37007874) / 1e9d;
                case LinearPowerDensityUnit.GigawattPerMeter: return (baseUnitValue) / 1e9d;
                case LinearPowerDensityUnit.GigawattPerMillimeter: return (baseUnitValue/1e3) / 1e9d;
                case LinearPowerDensityUnit.KilowattPerCentimeter: return (baseUnitValue/1e2) / 1e3d;
                case LinearPowerDensityUnit.KilowattPerFoot: return (baseUnitValue/3.280839895) / 1e3d;
                case LinearPowerDensityUnit.KilowattPerInch: return (baseUnitValue/39.37007874) / 1e3d;
                case LinearPowerDensityUnit.KilowattPerMeter: return (baseUnitValue) / 1e3d;
                case LinearPowerDensityUnit.KilowattPerMillimeter: return (baseUnitValue/1e3) / 1e3d;
                case LinearPowerDensityUnit.MegawattPerCentimeter: return (baseUnitValue/1e2) / 1e6d;
                case LinearPowerDensityUnit.MegawattPerFoot: return (baseUnitValue/3.280839895) / 1e6d;
                case LinearPowerDensityUnit.MegawattPerInch: return (baseUnitValue/39.37007874) / 1e6d;
                case LinearPowerDensityUnit.MegawattPerMeter: return (baseUnitValue) / 1e6d;
                case LinearPowerDensityUnit.MegawattPerMillimeter: return (baseUnitValue/1e3) / 1e6d;
                case LinearPowerDensityUnit.MilliwattPerCentimeter: return (baseUnitValue/1e2) / 1e-3d;
                case LinearPowerDensityUnit.MilliwattPerFoot: return (baseUnitValue/3.280839895) / 1e-3d;
                case LinearPowerDensityUnit.MilliwattPerInch: return (baseUnitValue/39.37007874) / 1e-3d;
                case LinearPowerDensityUnit.MilliwattPerMeter: return (baseUnitValue) / 1e-3d;
                case LinearPowerDensityUnit.MilliwattPerMillimeter: return (baseUnitValue/1e3) / 1e-3d;
                case LinearPowerDensityUnit.WattPerCentimeter: return baseUnitValue/1e2;
                case LinearPowerDensityUnit.WattPerFoot: return baseUnitValue/3.280839895;
                case LinearPowerDensityUnit.WattPerInch: return baseUnitValue/39.37007874;
                case LinearPowerDensityUnit.WattPerMeter: return baseUnitValue;
                case LinearPowerDensityUnit.WattPerMillimeter: return baseUnitValue/1e3;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString(IFormatProvider? provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString(IFormatProvider? provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider? provider)
        {
            return QuantityFormatter.Format<LinearPowerDensityUnit>(this, format, provider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(LinearPowerDensity)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(LinearPowerDensity)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(LinearPowerDensity)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(LinearPowerDensity))
                return this;
            else if(conversionType == typeof(LinearPowerDensityUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return LinearPowerDensity.QuantityType;
            else if(conversionType == typeof(QuantityInfo))
                return LinearPowerDensity.Info;
            else if(conversionType == typeof(BaseDimensions))
                return LinearPowerDensity.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(LinearPowerDensity)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
