//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Speed.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class SpeedTestsBase : QuantityTestsBase
    {
        protected abstract double CentimetersPerHourInOneMeterPerSecond { get; }
        protected abstract double CentimetersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double CentimetersPerSecondInOneMeterPerSecond { get; }
        protected abstract double DecimetersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double DecimetersPerSecondInOneMeterPerSecond { get; }
        protected abstract double FeetPerHourInOneMeterPerSecond { get; }
        protected abstract double FeetPerMinuteInOneMeterPerSecond { get; }
        protected abstract double FeetPerSecondInOneMeterPerSecond { get; }
        protected abstract double InchesPerHourInOneMeterPerSecond { get; }
        protected abstract double InchesPerMinuteInOneMeterPerSecond { get; }
        protected abstract double InchesPerSecondInOneMeterPerSecond { get; }
        protected abstract double KilometersPerHourInOneMeterPerSecond { get; }
        protected abstract double KilometersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double KilometersPerSecondInOneMeterPerSecond { get; }
        protected abstract double KnotsInOneMeterPerSecond { get; }
        protected abstract double MetersPerHourInOneMeterPerSecond { get; }
        protected abstract double MetersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double MetersPerSecondInOneMeterPerSecond { get; }
        protected abstract double MicrometersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double MicrometersPerSecondInOneMeterPerSecond { get; }
        protected abstract double MilesPerHourInOneMeterPerSecond { get; }
        protected abstract double MillimetersPerHourInOneMeterPerSecond { get; }
        protected abstract double MillimetersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double MillimetersPerSecondInOneMeterPerSecond { get; }
        protected abstract double NanometersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double NanometersPerSecondInOneMeterPerSecond { get; }
        protected abstract double UsSurveyFeetPerHourInOneMeterPerSecond { get; }
        protected abstract double UsSurveyFeetPerMinuteInOneMeterPerSecond { get; }
        protected abstract double UsSurveyFeetPerSecondInOneMeterPerSecond { get; }
        protected abstract double YardsPerHourInOneMeterPerSecond { get; }
        protected abstract double YardsPerMinuteInOneMeterPerSecond { get; }
        protected abstract double YardsPerSecondInOneMeterPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentimetersPerHourTolerance { get { return 1e-5; } }
        protected virtual double CentimetersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double CentimetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecimetersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double DecimetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double FeetPerHourTolerance { get { return 1e-5; } }
        protected virtual double FeetPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double FeetPerSecondTolerance { get { return 1e-5; } }
        protected virtual double InchesPerHourTolerance { get { return 1e-5; } }
        protected virtual double InchesPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double InchesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilometersPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilometersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double KilometersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KnotsTolerance { get { return 1e-5; } }
        protected virtual double MetersPerHourTolerance { get { return 1e-5; } }
        protected virtual double MetersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double MetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MicrometersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double MicrometersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MilesPerHourTolerance { get { return 1e-5; } }
        protected virtual double MillimetersPerHourTolerance { get { return 1e-5; } }
        protected virtual double MillimetersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double MillimetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanometersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double NanometersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double UsSurveyFeetPerHourTolerance { get { return 1e-5; } }
        protected virtual double UsSurveyFeetPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double UsSurveyFeetPerSecondTolerance { get { return 1e-5; } }
        protected virtual double YardsPerHourTolerance { get { return 1e-5; } }
        protected virtual double YardsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double YardsPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Speed((double)0.0, SpeedUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Speed();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(SpeedUnit.MeterPerSecond, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Speed(double.PositiveInfinity, SpeedUnit.MeterPerSecond));
            Assert.Throws<ArgumentException>(() => new Speed(double.NegativeInfinity, SpeedUnit.MeterPerSecond));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Speed(double.NaN, SpeedUnit.MeterPerSecond));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Speed(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new Speed(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (Speed) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void Speed_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Speed(1, SpeedUnit.MeterPerSecond);

            QuantityInfo<SpeedUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Speed.Zero, quantityInfo.Zero);
            Assert.Equal("Speed", quantityInfo.Name);
            Assert.Equal(QuantityType.Speed, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<SpeedUnit>().Except(new[] {SpeedUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void MeterPerSecondToSpeedUnits()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            AssertEx.EqualTolerance(CentimetersPerHourInOneMeterPerSecond, meterpersecond.CentimetersPerHour, CentimetersPerHourTolerance);
            AssertEx.EqualTolerance(CentimetersPerMinutesInOneMeterPerSecond, meterpersecond.CentimetersPerMinutes, CentimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(CentimetersPerSecondInOneMeterPerSecond, meterpersecond.CentimetersPerSecond, CentimetersPerSecondTolerance);
            AssertEx.EqualTolerance(DecimetersPerMinutesInOneMeterPerSecond, meterpersecond.DecimetersPerMinutes, DecimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(DecimetersPerSecondInOneMeterPerSecond, meterpersecond.DecimetersPerSecond, DecimetersPerSecondTolerance);
            AssertEx.EqualTolerance(FeetPerHourInOneMeterPerSecond, meterpersecond.FeetPerHour, FeetPerHourTolerance);
            AssertEx.EqualTolerance(FeetPerMinuteInOneMeterPerSecond, meterpersecond.FeetPerMinute, FeetPerMinuteTolerance);
            AssertEx.EqualTolerance(FeetPerSecondInOneMeterPerSecond, meterpersecond.FeetPerSecond, FeetPerSecondTolerance);
            AssertEx.EqualTolerance(InchesPerHourInOneMeterPerSecond, meterpersecond.InchesPerHour, InchesPerHourTolerance);
            AssertEx.EqualTolerance(InchesPerMinuteInOneMeterPerSecond, meterpersecond.InchesPerMinute, InchesPerMinuteTolerance);
            AssertEx.EqualTolerance(InchesPerSecondInOneMeterPerSecond, meterpersecond.InchesPerSecond, InchesPerSecondTolerance);
            AssertEx.EqualTolerance(KilometersPerHourInOneMeterPerSecond, meterpersecond.KilometersPerHour, KilometersPerHourTolerance);
            AssertEx.EqualTolerance(KilometersPerMinutesInOneMeterPerSecond, meterpersecond.KilometersPerMinutes, KilometersPerMinutesTolerance);
            AssertEx.EqualTolerance(KilometersPerSecondInOneMeterPerSecond, meterpersecond.KilometersPerSecond, KilometersPerSecondTolerance);
            AssertEx.EqualTolerance(KnotsInOneMeterPerSecond, meterpersecond.Knots, KnotsTolerance);
            AssertEx.EqualTolerance(MetersPerHourInOneMeterPerSecond, meterpersecond.MetersPerHour, MetersPerHourTolerance);
            AssertEx.EqualTolerance(MetersPerMinutesInOneMeterPerSecond, meterpersecond.MetersPerMinutes, MetersPerMinutesTolerance);
            AssertEx.EqualTolerance(MetersPerSecondInOneMeterPerSecond, meterpersecond.MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(MicrometersPerMinutesInOneMeterPerSecond, meterpersecond.MicrometersPerMinutes, MicrometersPerMinutesTolerance);
            AssertEx.EqualTolerance(MicrometersPerSecondInOneMeterPerSecond, meterpersecond.MicrometersPerSecond, MicrometersPerSecondTolerance);
            AssertEx.EqualTolerance(MilesPerHourInOneMeterPerSecond, meterpersecond.MilesPerHour, MilesPerHourTolerance);
            AssertEx.EqualTolerance(MillimetersPerHourInOneMeterPerSecond, meterpersecond.MillimetersPerHour, MillimetersPerHourTolerance);
            AssertEx.EqualTolerance(MillimetersPerMinutesInOneMeterPerSecond, meterpersecond.MillimetersPerMinutes, MillimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(MillimetersPerSecondInOneMeterPerSecond, meterpersecond.MillimetersPerSecond, MillimetersPerSecondTolerance);
            AssertEx.EqualTolerance(NanometersPerMinutesInOneMeterPerSecond, meterpersecond.NanometersPerMinutes, NanometersPerMinutesTolerance);
            AssertEx.EqualTolerance(NanometersPerSecondInOneMeterPerSecond, meterpersecond.NanometersPerSecond, NanometersPerSecondTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerHourInOneMeterPerSecond, meterpersecond.UsSurveyFeetPerHour, UsSurveyFeetPerHourTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerMinuteInOneMeterPerSecond, meterpersecond.UsSurveyFeetPerMinute, UsSurveyFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerSecondInOneMeterPerSecond, meterpersecond.UsSurveyFeetPerSecond, UsSurveyFeetPerSecondTolerance);
            AssertEx.EqualTolerance(YardsPerHourInOneMeterPerSecond, meterpersecond.YardsPerHour, YardsPerHourTolerance);
            AssertEx.EqualTolerance(YardsPerMinuteInOneMeterPerSecond, meterpersecond.YardsPerMinute, YardsPerMinuteTolerance);
            AssertEx.EqualTolerance(YardsPerSecondInOneMeterPerSecond, meterpersecond.YardsPerSecond, YardsPerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Speed.From(1, SpeedUnit.CentimeterPerHour);
            AssertEx.EqualTolerance(1, quantity00.CentimetersPerHour, CentimetersPerHourTolerance);
            Assert.Equal(SpeedUnit.CentimeterPerHour, quantity00.Unit);

            var quantity01 = Speed.From(1, SpeedUnit.CentimeterPerMinute);
            AssertEx.EqualTolerance(1, quantity01.CentimetersPerMinutes, CentimetersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.CentimeterPerMinute, quantity01.Unit);

            var quantity02 = Speed.From(1, SpeedUnit.CentimeterPerSecond);
            AssertEx.EqualTolerance(1, quantity02.CentimetersPerSecond, CentimetersPerSecondTolerance);
            Assert.Equal(SpeedUnit.CentimeterPerSecond, quantity02.Unit);

            var quantity03 = Speed.From(1, SpeedUnit.DecimeterPerMinute);
            AssertEx.EqualTolerance(1, quantity03.DecimetersPerMinutes, DecimetersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.DecimeterPerMinute, quantity03.Unit);

            var quantity04 = Speed.From(1, SpeedUnit.DecimeterPerSecond);
            AssertEx.EqualTolerance(1, quantity04.DecimetersPerSecond, DecimetersPerSecondTolerance);
            Assert.Equal(SpeedUnit.DecimeterPerSecond, quantity04.Unit);

            var quantity05 = Speed.From(1, SpeedUnit.FootPerHour);
            AssertEx.EqualTolerance(1, quantity05.FeetPerHour, FeetPerHourTolerance);
            Assert.Equal(SpeedUnit.FootPerHour, quantity05.Unit);

            var quantity06 = Speed.From(1, SpeedUnit.FootPerMinute);
            AssertEx.EqualTolerance(1, quantity06.FeetPerMinute, FeetPerMinuteTolerance);
            Assert.Equal(SpeedUnit.FootPerMinute, quantity06.Unit);

            var quantity07 = Speed.From(1, SpeedUnit.FootPerSecond);
            AssertEx.EqualTolerance(1, quantity07.FeetPerSecond, FeetPerSecondTolerance);
            Assert.Equal(SpeedUnit.FootPerSecond, quantity07.Unit);

            var quantity08 = Speed.From(1, SpeedUnit.InchPerHour);
            AssertEx.EqualTolerance(1, quantity08.InchesPerHour, InchesPerHourTolerance);
            Assert.Equal(SpeedUnit.InchPerHour, quantity08.Unit);

            var quantity09 = Speed.From(1, SpeedUnit.InchPerMinute);
            AssertEx.EqualTolerance(1, quantity09.InchesPerMinute, InchesPerMinuteTolerance);
            Assert.Equal(SpeedUnit.InchPerMinute, quantity09.Unit);

            var quantity10 = Speed.From(1, SpeedUnit.InchPerSecond);
            AssertEx.EqualTolerance(1, quantity10.InchesPerSecond, InchesPerSecondTolerance);
            Assert.Equal(SpeedUnit.InchPerSecond, quantity10.Unit);

            var quantity11 = Speed.From(1, SpeedUnit.KilometerPerHour);
            AssertEx.EqualTolerance(1, quantity11.KilometersPerHour, KilometersPerHourTolerance);
            Assert.Equal(SpeedUnit.KilometerPerHour, quantity11.Unit);

            var quantity12 = Speed.From(1, SpeedUnit.KilometerPerMinute);
            AssertEx.EqualTolerance(1, quantity12.KilometersPerMinutes, KilometersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.KilometerPerMinute, quantity12.Unit);

            var quantity13 = Speed.From(1, SpeedUnit.KilometerPerSecond);
            AssertEx.EqualTolerance(1, quantity13.KilometersPerSecond, KilometersPerSecondTolerance);
            Assert.Equal(SpeedUnit.KilometerPerSecond, quantity13.Unit);

            var quantity14 = Speed.From(1, SpeedUnit.Knot);
            AssertEx.EqualTolerance(1, quantity14.Knots, KnotsTolerance);
            Assert.Equal(SpeedUnit.Knot, quantity14.Unit);

            var quantity15 = Speed.From(1, SpeedUnit.MeterPerHour);
            AssertEx.EqualTolerance(1, quantity15.MetersPerHour, MetersPerHourTolerance);
            Assert.Equal(SpeedUnit.MeterPerHour, quantity15.Unit);

            var quantity16 = Speed.From(1, SpeedUnit.MeterPerMinute);
            AssertEx.EqualTolerance(1, quantity16.MetersPerMinutes, MetersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.MeterPerMinute, quantity16.Unit);

            var quantity17 = Speed.From(1, SpeedUnit.MeterPerSecond);
            AssertEx.EqualTolerance(1, quantity17.MetersPerSecond, MetersPerSecondTolerance);
            Assert.Equal(SpeedUnit.MeterPerSecond, quantity17.Unit);

            var quantity18 = Speed.From(1, SpeedUnit.MicrometerPerMinute);
            AssertEx.EqualTolerance(1, quantity18.MicrometersPerMinutes, MicrometersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.MicrometerPerMinute, quantity18.Unit);

            var quantity19 = Speed.From(1, SpeedUnit.MicrometerPerSecond);
            AssertEx.EqualTolerance(1, quantity19.MicrometersPerSecond, MicrometersPerSecondTolerance);
            Assert.Equal(SpeedUnit.MicrometerPerSecond, quantity19.Unit);

            var quantity20 = Speed.From(1, SpeedUnit.MilePerHour);
            AssertEx.EqualTolerance(1, quantity20.MilesPerHour, MilesPerHourTolerance);
            Assert.Equal(SpeedUnit.MilePerHour, quantity20.Unit);

            var quantity21 = Speed.From(1, SpeedUnit.MillimeterPerHour);
            AssertEx.EqualTolerance(1, quantity21.MillimetersPerHour, MillimetersPerHourTolerance);
            Assert.Equal(SpeedUnit.MillimeterPerHour, quantity21.Unit);

            var quantity22 = Speed.From(1, SpeedUnit.MillimeterPerMinute);
            AssertEx.EqualTolerance(1, quantity22.MillimetersPerMinutes, MillimetersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.MillimeterPerMinute, quantity22.Unit);

            var quantity23 = Speed.From(1, SpeedUnit.MillimeterPerSecond);
            AssertEx.EqualTolerance(1, quantity23.MillimetersPerSecond, MillimetersPerSecondTolerance);
            Assert.Equal(SpeedUnit.MillimeterPerSecond, quantity23.Unit);

            var quantity24 = Speed.From(1, SpeedUnit.NanometerPerMinute);
            AssertEx.EqualTolerance(1, quantity24.NanometersPerMinutes, NanometersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.NanometerPerMinute, quantity24.Unit);

            var quantity25 = Speed.From(1, SpeedUnit.NanometerPerSecond);
            AssertEx.EqualTolerance(1, quantity25.NanometersPerSecond, NanometersPerSecondTolerance);
            Assert.Equal(SpeedUnit.NanometerPerSecond, quantity25.Unit);

            var quantity26 = Speed.From(1, SpeedUnit.UsSurveyFootPerHour);
            AssertEx.EqualTolerance(1, quantity26.UsSurveyFeetPerHour, UsSurveyFeetPerHourTolerance);
            Assert.Equal(SpeedUnit.UsSurveyFootPerHour, quantity26.Unit);

            var quantity27 = Speed.From(1, SpeedUnit.UsSurveyFootPerMinute);
            AssertEx.EqualTolerance(1, quantity27.UsSurveyFeetPerMinute, UsSurveyFeetPerMinuteTolerance);
            Assert.Equal(SpeedUnit.UsSurveyFootPerMinute, quantity27.Unit);

            var quantity28 = Speed.From(1, SpeedUnit.UsSurveyFootPerSecond);
            AssertEx.EqualTolerance(1, quantity28.UsSurveyFeetPerSecond, UsSurveyFeetPerSecondTolerance);
            Assert.Equal(SpeedUnit.UsSurveyFootPerSecond, quantity28.Unit);

            var quantity29 = Speed.From(1, SpeedUnit.YardPerHour);
            AssertEx.EqualTolerance(1, quantity29.YardsPerHour, YardsPerHourTolerance);
            Assert.Equal(SpeedUnit.YardPerHour, quantity29.Unit);

            var quantity30 = Speed.From(1, SpeedUnit.YardPerMinute);
            AssertEx.EqualTolerance(1, quantity30.YardsPerMinute, YardsPerMinuteTolerance);
            Assert.Equal(SpeedUnit.YardPerMinute, quantity30.Unit);

            var quantity31 = Speed.From(1, SpeedUnit.YardPerSecond);
            AssertEx.EqualTolerance(1, quantity31.YardsPerSecond, YardsPerSecondTolerance);
            Assert.Equal(SpeedUnit.YardPerSecond, quantity31.Unit);

        }

        [Fact]
        public void FromMetersPerSecond_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Speed.FromMetersPerSecond(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Speed.FromMetersPerSecond(double.NegativeInfinity));
        }

        [Fact]
        public void FromMetersPerSecond_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Speed.FromMetersPerSecond(double.NaN));
        }

        [Fact]
        public void As()
        {
            var meterpersecond = Speed.FromMetersPerSecond(1);
            AssertEx.EqualTolerance(CentimetersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.CentimeterPerHour), CentimetersPerHourTolerance);
            AssertEx.EqualTolerance(CentimetersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.CentimeterPerMinute), CentimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(CentimetersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.CentimeterPerSecond), CentimetersPerSecondTolerance);
            AssertEx.EqualTolerance(DecimetersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.DecimeterPerMinute), DecimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(DecimetersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.DecimeterPerSecond), DecimetersPerSecondTolerance);
            AssertEx.EqualTolerance(FeetPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.FootPerHour), FeetPerHourTolerance);
            AssertEx.EqualTolerance(FeetPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.FootPerMinute), FeetPerMinuteTolerance);
            AssertEx.EqualTolerance(FeetPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.FootPerSecond), FeetPerSecondTolerance);
            AssertEx.EqualTolerance(InchesPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.InchPerHour), InchesPerHourTolerance);
            AssertEx.EqualTolerance(InchesPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.InchPerMinute), InchesPerMinuteTolerance);
            AssertEx.EqualTolerance(InchesPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.InchPerSecond), InchesPerSecondTolerance);
            AssertEx.EqualTolerance(KilometersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.KilometerPerHour), KilometersPerHourTolerance);
            AssertEx.EqualTolerance(KilometersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.KilometerPerMinute), KilometersPerMinutesTolerance);
            AssertEx.EqualTolerance(KilometersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.KilometerPerSecond), KilometersPerSecondTolerance);
            AssertEx.EqualTolerance(KnotsInOneMeterPerSecond, meterpersecond.As(SpeedUnit.Knot), KnotsTolerance);
            AssertEx.EqualTolerance(MetersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MeterPerHour), MetersPerHourTolerance);
            AssertEx.EqualTolerance(MetersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MeterPerMinute), MetersPerMinutesTolerance);
            AssertEx.EqualTolerance(MetersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MeterPerSecond), MetersPerSecondTolerance);
            AssertEx.EqualTolerance(MicrometersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MicrometerPerMinute), MicrometersPerMinutesTolerance);
            AssertEx.EqualTolerance(MicrometersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MicrometerPerSecond), MicrometersPerSecondTolerance);
            AssertEx.EqualTolerance(MilesPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MilePerHour), MilesPerHourTolerance);
            AssertEx.EqualTolerance(MillimetersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MillimeterPerHour), MillimetersPerHourTolerance);
            AssertEx.EqualTolerance(MillimetersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MillimeterPerMinute), MillimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(MillimetersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MillimeterPerSecond), MillimetersPerSecondTolerance);
            AssertEx.EqualTolerance(NanometersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.NanometerPerMinute), NanometersPerMinutesTolerance);
            AssertEx.EqualTolerance(NanometersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.NanometerPerSecond), NanometersPerSecondTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.UsSurveyFootPerHour), UsSurveyFeetPerHourTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.UsSurveyFootPerMinute), UsSurveyFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.UsSurveyFootPerSecond), UsSurveyFeetPerSecondTolerance);
            AssertEx.EqualTolerance(YardsPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.YardPerHour), YardsPerHourTolerance);
            AssertEx.EqualTolerance(YardsPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.YardPerMinute), YardsPerMinuteTolerance);
            AssertEx.EqualTolerance(YardsPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.YardPerSecond), YardsPerSecondTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Speed(value: 1, unit: Speed.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var meterpersecond = Speed.FromMetersPerSecond(1);

            var centimeterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.CentimeterPerHour);
            AssertEx.EqualTolerance(CentimetersPerHourInOneMeterPerSecond, (double)centimeterperhourQuantity.Value, CentimetersPerHourTolerance);
            Assert.Equal(SpeedUnit.CentimeterPerHour, centimeterperhourQuantity.Unit);

            var centimeterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.CentimeterPerMinute);
            AssertEx.EqualTolerance(CentimetersPerMinutesInOneMeterPerSecond, (double)centimeterperminuteQuantity.Value, CentimetersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.CentimeterPerMinute, centimeterperminuteQuantity.Unit);

            var centimeterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.CentimeterPerSecond);
            AssertEx.EqualTolerance(CentimetersPerSecondInOneMeterPerSecond, (double)centimeterpersecondQuantity.Value, CentimetersPerSecondTolerance);
            Assert.Equal(SpeedUnit.CentimeterPerSecond, centimeterpersecondQuantity.Unit);

            var decimeterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.DecimeterPerMinute);
            AssertEx.EqualTolerance(DecimetersPerMinutesInOneMeterPerSecond, (double)decimeterperminuteQuantity.Value, DecimetersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.DecimeterPerMinute, decimeterperminuteQuantity.Unit);

            var decimeterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.DecimeterPerSecond);
            AssertEx.EqualTolerance(DecimetersPerSecondInOneMeterPerSecond, (double)decimeterpersecondQuantity.Value, DecimetersPerSecondTolerance);
            Assert.Equal(SpeedUnit.DecimeterPerSecond, decimeterpersecondQuantity.Unit);

            var footperhourQuantity = meterpersecond.ToUnit(SpeedUnit.FootPerHour);
            AssertEx.EqualTolerance(FeetPerHourInOneMeterPerSecond, (double)footperhourQuantity.Value, FeetPerHourTolerance);
            Assert.Equal(SpeedUnit.FootPerHour, footperhourQuantity.Unit);

            var footperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.FootPerMinute);
            AssertEx.EqualTolerance(FeetPerMinuteInOneMeterPerSecond, (double)footperminuteQuantity.Value, FeetPerMinuteTolerance);
            Assert.Equal(SpeedUnit.FootPerMinute, footperminuteQuantity.Unit);

            var footpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.FootPerSecond);
            AssertEx.EqualTolerance(FeetPerSecondInOneMeterPerSecond, (double)footpersecondQuantity.Value, FeetPerSecondTolerance);
            Assert.Equal(SpeedUnit.FootPerSecond, footpersecondQuantity.Unit);

            var inchperhourQuantity = meterpersecond.ToUnit(SpeedUnit.InchPerHour);
            AssertEx.EqualTolerance(InchesPerHourInOneMeterPerSecond, (double)inchperhourQuantity.Value, InchesPerHourTolerance);
            Assert.Equal(SpeedUnit.InchPerHour, inchperhourQuantity.Unit);

            var inchperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.InchPerMinute);
            AssertEx.EqualTolerance(InchesPerMinuteInOneMeterPerSecond, (double)inchperminuteQuantity.Value, InchesPerMinuteTolerance);
            Assert.Equal(SpeedUnit.InchPerMinute, inchperminuteQuantity.Unit);

            var inchpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.InchPerSecond);
            AssertEx.EqualTolerance(InchesPerSecondInOneMeterPerSecond, (double)inchpersecondQuantity.Value, InchesPerSecondTolerance);
            Assert.Equal(SpeedUnit.InchPerSecond, inchpersecondQuantity.Unit);

            var kilometerperhourQuantity = meterpersecond.ToUnit(SpeedUnit.KilometerPerHour);
            AssertEx.EqualTolerance(KilometersPerHourInOneMeterPerSecond, (double)kilometerperhourQuantity.Value, KilometersPerHourTolerance);
            Assert.Equal(SpeedUnit.KilometerPerHour, kilometerperhourQuantity.Unit);

            var kilometerperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.KilometerPerMinute);
            AssertEx.EqualTolerance(KilometersPerMinutesInOneMeterPerSecond, (double)kilometerperminuteQuantity.Value, KilometersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.KilometerPerMinute, kilometerperminuteQuantity.Unit);

            var kilometerpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.KilometerPerSecond);
            AssertEx.EqualTolerance(KilometersPerSecondInOneMeterPerSecond, (double)kilometerpersecondQuantity.Value, KilometersPerSecondTolerance);
            Assert.Equal(SpeedUnit.KilometerPerSecond, kilometerpersecondQuantity.Unit);

            var knotQuantity = meterpersecond.ToUnit(SpeedUnit.Knot);
            AssertEx.EqualTolerance(KnotsInOneMeterPerSecond, (double)knotQuantity.Value, KnotsTolerance);
            Assert.Equal(SpeedUnit.Knot, knotQuantity.Unit);

            var meterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.MeterPerHour);
            AssertEx.EqualTolerance(MetersPerHourInOneMeterPerSecond, (double)meterperhourQuantity.Value, MetersPerHourTolerance);
            Assert.Equal(SpeedUnit.MeterPerHour, meterperhourQuantity.Unit);

            var meterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.MeterPerMinute);
            AssertEx.EqualTolerance(MetersPerMinutesInOneMeterPerSecond, (double)meterperminuteQuantity.Value, MetersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.MeterPerMinute, meterperminuteQuantity.Unit);

            var meterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.MeterPerSecond);
            AssertEx.EqualTolerance(MetersPerSecondInOneMeterPerSecond, (double)meterpersecondQuantity.Value, MetersPerSecondTolerance);
            Assert.Equal(SpeedUnit.MeterPerSecond, meterpersecondQuantity.Unit);

            var micrometerperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.MicrometerPerMinute);
            AssertEx.EqualTolerance(MicrometersPerMinutesInOneMeterPerSecond, (double)micrometerperminuteQuantity.Value, MicrometersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.MicrometerPerMinute, micrometerperminuteQuantity.Unit);

            var micrometerpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.MicrometerPerSecond);
            AssertEx.EqualTolerance(MicrometersPerSecondInOneMeterPerSecond, (double)micrometerpersecondQuantity.Value, MicrometersPerSecondTolerance);
            Assert.Equal(SpeedUnit.MicrometerPerSecond, micrometerpersecondQuantity.Unit);

            var mileperhourQuantity = meterpersecond.ToUnit(SpeedUnit.MilePerHour);
            AssertEx.EqualTolerance(MilesPerHourInOneMeterPerSecond, (double)mileperhourQuantity.Value, MilesPerHourTolerance);
            Assert.Equal(SpeedUnit.MilePerHour, mileperhourQuantity.Unit);

            var millimeterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.MillimeterPerHour);
            AssertEx.EqualTolerance(MillimetersPerHourInOneMeterPerSecond, (double)millimeterperhourQuantity.Value, MillimetersPerHourTolerance);
            Assert.Equal(SpeedUnit.MillimeterPerHour, millimeterperhourQuantity.Unit);

            var millimeterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.MillimeterPerMinute);
            AssertEx.EqualTolerance(MillimetersPerMinutesInOneMeterPerSecond, (double)millimeterperminuteQuantity.Value, MillimetersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.MillimeterPerMinute, millimeterperminuteQuantity.Unit);

            var millimeterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.MillimeterPerSecond);
            AssertEx.EqualTolerance(MillimetersPerSecondInOneMeterPerSecond, (double)millimeterpersecondQuantity.Value, MillimetersPerSecondTolerance);
            Assert.Equal(SpeedUnit.MillimeterPerSecond, millimeterpersecondQuantity.Unit);

            var nanometerperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.NanometerPerMinute);
            AssertEx.EqualTolerance(NanometersPerMinutesInOneMeterPerSecond, (double)nanometerperminuteQuantity.Value, NanometersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.NanometerPerMinute, nanometerperminuteQuantity.Unit);

            var nanometerpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.NanometerPerSecond);
            AssertEx.EqualTolerance(NanometersPerSecondInOneMeterPerSecond, (double)nanometerpersecondQuantity.Value, NanometersPerSecondTolerance);
            Assert.Equal(SpeedUnit.NanometerPerSecond, nanometerpersecondQuantity.Unit);

            var ussurveyfootperhourQuantity = meterpersecond.ToUnit(SpeedUnit.UsSurveyFootPerHour);
            AssertEx.EqualTolerance(UsSurveyFeetPerHourInOneMeterPerSecond, (double)ussurveyfootperhourQuantity.Value, UsSurveyFeetPerHourTolerance);
            Assert.Equal(SpeedUnit.UsSurveyFootPerHour, ussurveyfootperhourQuantity.Unit);

            var ussurveyfootperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.UsSurveyFootPerMinute);
            AssertEx.EqualTolerance(UsSurveyFeetPerMinuteInOneMeterPerSecond, (double)ussurveyfootperminuteQuantity.Value, UsSurveyFeetPerMinuteTolerance);
            Assert.Equal(SpeedUnit.UsSurveyFootPerMinute, ussurveyfootperminuteQuantity.Unit);

            var ussurveyfootpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.UsSurveyFootPerSecond);
            AssertEx.EqualTolerance(UsSurveyFeetPerSecondInOneMeterPerSecond, (double)ussurveyfootpersecondQuantity.Value, UsSurveyFeetPerSecondTolerance);
            Assert.Equal(SpeedUnit.UsSurveyFootPerSecond, ussurveyfootpersecondQuantity.Unit);

            var yardperhourQuantity = meterpersecond.ToUnit(SpeedUnit.YardPerHour);
            AssertEx.EqualTolerance(YardsPerHourInOneMeterPerSecond, (double)yardperhourQuantity.Value, YardsPerHourTolerance);
            Assert.Equal(SpeedUnit.YardPerHour, yardperhourQuantity.Unit);

            var yardperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.YardPerMinute);
            AssertEx.EqualTolerance(YardsPerMinuteInOneMeterPerSecond, (double)yardperminuteQuantity.Value, YardsPerMinuteTolerance);
            Assert.Equal(SpeedUnit.YardPerMinute, yardperminuteQuantity.Unit);

            var yardpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.YardPerSecond);
            AssertEx.EqualTolerance(YardsPerSecondInOneMeterPerSecond, (double)yardpersecondQuantity.Value, YardsPerSecondTolerance);
            Assert.Equal(SpeedUnit.YardPerSecond, yardpersecondQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = Speed.FromMetersPerSecond(1).ToBaseUnit();
            Assert.Equal(Speed.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            AssertEx.EqualTolerance(1, Speed.FromCentimetersPerHour(meterpersecond.CentimetersPerHour).MetersPerSecond, CentimetersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromCentimetersPerMinutes(meterpersecond.CentimetersPerMinutes).MetersPerSecond, CentimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromCentimetersPerSecond(meterpersecond.CentimetersPerSecond).MetersPerSecond, CentimetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromDecimetersPerMinutes(meterpersecond.DecimetersPerMinutes).MetersPerSecond, DecimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromDecimetersPerSecond(meterpersecond.DecimetersPerSecond).MetersPerSecond, DecimetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromFeetPerHour(meterpersecond.FeetPerHour).MetersPerSecond, FeetPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromFeetPerMinute(meterpersecond.FeetPerMinute).MetersPerSecond, FeetPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromFeetPerSecond(meterpersecond.FeetPerSecond).MetersPerSecond, FeetPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromInchesPerHour(meterpersecond.InchesPerHour).MetersPerSecond, InchesPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromInchesPerMinute(meterpersecond.InchesPerMinute).MetersPerSecond, InchesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromInchesPerSecond(meterpersecond.InchesPerSecond).MetersPerSecond, InchesPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromKilometersPerHour(meterpersecond.KilometersPerHour).MetersPerSecond, KilometersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromKilometersPerMinutes(meterpersecond.KilometersPerMinutes).MetersPerSecond, KilometersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromKilometersPerSecond(meterpersecond.KilometersPerSecond).MetersPerSecond, KilometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromKnots(meterpersecond.Knots).MetersPerSecond, KnotsTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMetersPerHour(meterpersecond.MetersPerHour).MetersPerSecond, MetersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMetersPerMinutes(meterpersecond.MetersPerMinutes).MetersPerSecond, MetersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMetersPerSecond(meterpersecond.MetersPerSecond).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMicrometersPerMinutes(meterpersecond.MicrometersPerMinutes).MetersPerSecond, MicrometersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMicrometersPerSecond(meterpersecond.MicrometersPerSecond).MetersPerSecond, MicrometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMilesPerHour(meterpersecond.MilesPerHour).MetersPerSecond, MilesPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMillimetersPerHour(meterpersecond.MillimetersPerHour).MetersPerSecond, MillimetersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMillimetersPerMinutes(meterpersecond.MillimetersPerMinutes).MetersPerSecond, MillimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMillimetersPerSecond(meterpersecond.MillimetersPerSecond).MetersPerSecond, MillimetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromNanometersPerMinutes(meterpersecond.NanometersPerMinutes).MetersPerSecond, NanometersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromNanometersPerSecond(meterpersecond.NanometersPerSecond).MetersPerSecond, NanometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromUsSurveyFeetPerHour(meterpersecond.UsSurveyFeetPerHour).MetersPerSecond, UsSurveyFeetPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromUsSurveyFeetPerMinute(meterpersecond.UsSurveyFeetPerMinute).MetersPerSecond, UsSurveyFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromUsSurveyFeetPerSecond(meterpersecond.UsSurveyFeetPerSecond).MetersPerSecond, UsSurveyFeetPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromYardsPerHour(meterpersecond.YardsPerHour).MetersPerSecond, YardsPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromYardsPerMinute(meterpersecond.YardsPerMinute).MetersPerSecond, YardsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromYardsPerSecond(meterpersecond.YardsPerSecond).MetersPerSecond, YardsPerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Speed v = Speed.FromMetersPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, (Speed.FromMetersPerSecond(3)-v).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, (Speed.FromMetersPerSecond(10)/5).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, Speed.FromMetersPerSecond(10)/Speed.FromMetersPerSecond(5), MetersPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Speed oneMeterPerSecond = Speed.FromMetersPerSecond(1);
            Speed twoMetersPerSecond = Speed.FromMetersPerSecond(2);

            Assert.True(oneMeterPerSecond < twoMetersPerSecond);
            Assert.True(oneMeterPerSecond <= twoMetersPerSecond);
            Assert.True(twoMetersPerSecond > oneMeterPerSecond);
            Assert.True(twoMetersPerSecond >= oneMeterPerSecond);

            Assert.False(oneMeterPerSecond > twoMetersPerSecond);
            Assert.False(oneMeterPerSecond >= twoMetersPerSecond);
            Assert.False(twoMetersPerSecond < oneMeterPerSecond);
            Assert.False(twoMetersPerSecond <= oneMeterPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            Assert.Equal(0, meterpersecond.CompareTo(meterpersecond));
            Assert.True(meterpersecond.CompareTo(Speed.Zero) > 0);
            Assert.True(Speed.Zero.CompareTo(meterpersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            Assert.Throws<ArgumentException>(() => meterpersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => meterpersecond.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Speed.FromMetersPerSecond(1);
            var b = Speed.FromMetersPerSecond(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = Speed.FromMetersPerSecond(1);
            var b = Speed.FromMetersPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = Speed.FromMetersPerSecond(1);
            object b = Speed.FromMetersPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Speed.FromMetersPerSecond(1);
            Assert.True(v.Equals(Speed.FromMetersPerSecond(1), MetersPerSecondTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Speed.Zero, MetersPerSecondTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Speed.FromMetersPerSecond(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Speed.FromMetersPerSecond(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            Assert.False(meterpersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            Assert.False(meterpersecond.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(SpeedUnit.Undefined, Speed.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(SpeedUnit)).Cast<SpeedUnit>();
            foreach(var unit in units)
            {
                if(unit == SpeedUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Speed.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cm/h", new Speed(1, SpeedUnit.CentimeterPerHour).ToString());
                Assert.Equal("1 cm/min", new Speed(1, SpeedUnit.CentimeterPerMinute).ToString());
                Assert.Equal("1 cm/s", new Speed(1, SpeedUnit.CentimeterPerSecond).ToString());
                Assert.Equal("1 dm/min", new Speed(1, SpeedUnit.DecimeterPerMinute).ToString());
                Assert.Equal("1 dm/s", new Speed(1, SpeedUnit.DecimeterPerSecond).ToString());
                Assert.Equal("1 ft/h", new Speed(1, SpeedUnit.FootPerHour).ToString());
                Assert.Equal("1 ft/min", new Speed(1, SpeedUnit.FootPerMinute).ToString());
                Assert.Equal("1 ft/s", new Speed(1, SpeedUnit.FootPerSecond).ToString());
                Assert.Equal("1 in/h", new Speed(1, SpeedUnit.InchPerHour).ToString());
                Assert.Equal("1 in/min", new Speed(1, SpeedUnit.InchPerMinute).ToString());
                Assert.Equal("1 in/s", new Speed(1, SpeedUnit.InchPerSecond).ToString());
                Assert.Equal("1 km/h", new Speed(1, SpeedUnit.KilometerPerHour).ToString());
                Assert.Equal("1 km/min", new Speed(1, SpeedUnit.KilometerPerMinute).ToString());
                Assert.Equal("1 km/s", new Speed(1, SpeedUnit.KilometerPerSecond).ToString());
                Assert.Equal("1 kn", new Speed(1, SpeedUnit.Knot).ToString());
                Assert.Equal("1 m/h", new Speed(1, SpeedUnit.MeterPerHour).ToString());
                Assert.Equal("1 m/min", new Speed(1, SpeedUnit.MeterPerMinute).ToString());
                Assert.Equal("1 m/s", new Speed(1, SpeedUnit.MeterPerSecond).ToString());
                Assert.Equal("1 µm/min", new Speed(1, SpeedUnit.MicrometerPerMinute).ToString());
                Assert.Equal("1 µm/s", new Speed(1, SpeedUnit.MicrometerPerSecond).ToString());
                Assert.Equal("1 mph", new Speed(1, SpeedUnit.MilePerHour).ToString());
                Assert.Equal("1 mm/h", new Speed(1, SpeedUnit.MillimeterPerHour).ToString());
                Assert.Equal("1 mm/min", new Speed(1, SpeedUnit.MillimeterPerMinute).ToString());
                Assert.Equal("1 mm/s", new Speed(1, SpeedUnit.MillimeterPerSecond).ToString());
                Assert.Equal("1 nm/min", new Speed(1, SpeedUnit.NanometerPerMinute).ToString());
                Assert.Equal("1 nm/s", new Speed(1, SpeedUnit.NanometerPerSecond).ToString());
                Assert.Equal("1 ftUS/h", new Speed(1, SpeedUnit.UsSurveyFootPerHour).ToString());
                Assert.Equal("1 ftUS/min", new Speed(1, SpeedUnit.UsSurveyFootPerMinute).ToString());
                Assert.Equal("1 ftUS/s", new Speed(1, SpeedUnit.UsSurveyFootPerSecond).ToString());
                Assert.Equal("1 yd/h", new Speed(1, SpeedUnit.YardPerHour).ToString());
                Assert.Equal("1 yd/min", new Speed(1, SpeedUnit.YardPerMinute).ToString());
                Assert.Equal("1 yd/s", new Speed(1, SpeedUnit.YardPerSecond).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cm/h", new Speed(1, SpeedUnit.CentimeterPerHour).ToString(swedishCulture));
            Assert.Equal("1 cm/min", new Speed(1, SpeedUnit.CentimeterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 cm/s", new Speed(1, SpeedUnit.CentimeterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 dm/min", new Speed(1, SpeedUnit.DecimeterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 dm/s", new Speed(1, SpeedUnit.DecimeterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 ft/h", new Speed(1, SpeedUnit.FootPerHour).ToString(swedishCulture));
            Assert.Equal("1 ft/min", new Speed(1, SpeedUnit.FootPerMinute).ToString(swedishCulture));
            Assert.Equal("1 ft/s", new Speed(1, SpeedUnit.FootPerSecond).ToString(swedishCulture));
            Assert.Equal("1 in/h", new Speed(1, SpeedUnit.InchPerHour).ToString(swedishCulture));
            Assert.Equal("1 in/min", new Speed(1, SpeedUnit.InchPerMinute).ToString(swedishCulture));
            Assert.Equal("1 in/s", new Speed(1, SpeedUnit.InchPerSecond).ToString(swedishCulture));
            Assert.Equal("1 km/h", new Speed(1, SpeedUnit.KilometerPerHour).ToString(swedishCulture));
            Assert.Equal("1 km/min", new Speed(1, SpeedUnit.KilometerPerMinute).ToString(swedishCulture));
            Assert.Equal("1 km/s", new Speed(1, SpeedUnit.KilometerPerSecond).ToString(swedishCulture));
            Assert.Equal("1 kn", new Speed(1, SpeedUnit.Knot).ToString(swedishCulture));
            Assert.Equal("1 m/h", new Speed(1, SpeedUnit.MeterPerHour).ToString(swedishCulture));
            Assert.Equal("1 m/min", new Speed(1, SpeedUnit.MeterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 m/s", new Speed(1, SpeedUnit.MeterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 µm/min", new Speed(1, SpeedUnit.MicrometerPerMinute).ToString(swedishCulture));
            Assert.Equal("1 µm/s", new Speed(1, SpeedUnit.MicrometerPerSecond).ToString(swedishCulture));
            Assert.Equal("1 mph", new Speed(1, SpeedUnit.MilePerHour).ToString(swedishCulture));
            Assert.Equal("1 mm/h", new Speed(1, SpeedUnit.MillimeterPerHour).ToString(swedishCulture));
            Assert.Equal("1 mm/min", new Speed(1, SpeedUnit.MillimeterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 mm/s", new Speed(1, SpeedUnit.MillimeterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 nm/min", new Speed(1, SpeedUnit.NanometerPerMinute).ToString(swedishCulture));
            Assert.Equal("1 nm/s", new Speed(1, SpeedUnit.NanometerPerSecond).ToString(swedishCulture));
            Assert.Equal("1 ftUS/h", new Speed(1, SpeedUnit.UsSurveyFootPerHour).ToString(swedishCulture));
            Assert.Equal("1 ftUS/min", new Speed(1, SpeedUnit.UsSurveyFootPerMinute).ToString(swedishCulture));
            Assert.Equal("1 ftUS/s", new Speed(1, SpeedUnit.UsSurveyFootPerSecond).ToString(swedishCulture));
            Assert.Equal("1 yd/h", new Speed(1, SpeedUnit.YardPerHour).ToString(swedishCulture));
            Assert.Equal("1 yd/min", new Speed(1, SpeedUnit.YardPerMinute).ToString(swedishCulture));
            Assert.Equal("1 yd/s", new Speed(1, SpeedUnit.YardPerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 m/s", new Speed(0.123456, SpeedUnit.MeterPerSecond).ToString("s1"));
                Assert.Equal("0.12 m/s", new Speed(0.123456, SpeedUnit.MeterPerSecond).ToString("s2"));
                Assert.Equal("0.123 m/s", new Speed(0.123456, SpeedUnit.MeterPerSecond).ToString("s3"));
                Assert.Equal("0.1235 m/s", new Speed(0.123456, SpeedUnit.MeterPerSecond).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 m/s", new Speed(0.123456, SpeedUnit.MeterPerSecond).ToString("s1", culture));
            Assert.Equal("0.12 m/s", new Speed(0.123456, SpeedUnit.MeterPerSecond).ToString("s2", culture));
            Assert.Equal("0.123 m/s", new Speed(0.123456, SpeedUnit.MeterPerSecond).ToString("s3", culture));
            Assert.Equal("0.1235 m/s", new Speed(0.123456, SpeedUnit.MeterPerSecond).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Speed)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(SpeedUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal(QuantityType.Speed, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal(Speed.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal(Speed.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal(new {Speed.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Speed.FromMetersPerSecond(value);
            Assert.Equal(Speed.FromMetersPerSecond(-value), -quantity);
        }
    }
}
