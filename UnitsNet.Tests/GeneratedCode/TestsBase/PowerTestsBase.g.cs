//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Power.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class PowerTestsBase : QuantityTestsBase
    {
        protected abstract double BoilerHorsepowerInOneWatt { get; }
        protected abstract double BritishThermalUnitsPerHourInOneWatt { get; }
        protected abstract double DecawattsInOneWatt { get; }
        protected abstract double DeciwattsInOneWatt { get; }
        protected abstract double ElectricalHorsepowerInOneWatt { get; }
        protected abstract double FemtowattsInOneWatt { get; }
        protected abstract double GigajoulesPerHourInOneWatt { get; }
        protected abstract double GigawattsInOneWatt { get; }
        protected abstract double HydraulicHorsepowerInOneWatt { get; }
        protected abstract double JoulesPerHourInOneWatt { get; }
        protected abstract double KilobritishThermalUnitsPerHourInOneWatt { get; }
        protected abstract double KilojoulesPerHourInOneWatt { get; }
        protected abstract double KilowattsInOneWatt { get; }
        protected abstract double MechanicalHorsepowerInOneWatt { get; }
        protected abstract double MegajoulesPerHourInOneWatt { get; }
        protected abstract double MegawattsInOneWatt { get; }
        protected abstract double MetricHorsepowerInOneWatt { get; }
        protected abstract double MicrowattsInOneWatt { get; }
        protected abstract double MillijoulesPerHourInOneWatt { get; }
        protected abstract double MilliwattsInOneWatt { get; }
        protected abstract double NanowattsInOneWatt { get; }
        protected abstract double PetawattsInOneWatt { get; }
        protected abstract double PicowattsInOneWatt { get; }
        protected abstract double TerawattsInOneWatt { get; }
        protected abstract double WattsInOneWatt { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BoilerHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double BritishThermalUnitsPerHourTolerance { get { return 1e-5; } }
        protected virtual double DecawattsTolerance { get { return 1e-5; } }
        protected virtual double DeciwattsTolerance { get { return 1e-5; } }
        protected virtual double ElectricalHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double FemtowattsTolerance { get { return 1e-5; } }
        protected virtual double GigajoulesPerHourTolerance { get { return 1e-5; } }
        protected virtual double GigawattsTolerance { get { return 1e-5; } }
        protected virtual double HydraulicHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double JoulesPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilobritishThermalUnitsPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilowattsTolerance { get { return 1e-5; } }
        protected virtual double MechanicalHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesPerHourTolerance { get { return 1e-5; } }
        protected virtual double MegawattsTolerance { get { return 1e-5; } }
        protected virtual double MetricHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double MicrowattsTolerance { get { return 1e-5; } }
        protected virtual double MillijoulesPerHourTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsTolerance { get { return 1e-5; } }
        protected virtual double NanowattsTolerance { get { return 1e-5; } }
        protected virtual double PetawattsTolerance { get { return 1e-5; } }
        protected virtual double PicowattsTolerance { get { return 1e-5; } }
        protected virtual double TerawattsTolerance { get { return 1e-5; } }
        protected virtual double WattsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Power((decimal)0.0, PowerUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Power();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(0m, ((IDecimalQuantity)quantity).Value);
            Assert.Equal(PowerUnit.Watt, quantity.Unit);
        }


        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Power(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new Power(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (Power) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void Power_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Power(1, PowerUnit.Watt);

            QuantityInfo<PowerUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Power.Zero, quantityInfo.Zero);
            Assert.Equal("Power", quantityInfo.Name);
            Assert.Equal(QuantityType.Power, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<PowerUnit>().Except(new[] {PowerUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void WattToPowerUnits()
        {
            Power watt = Power.FromWatts(1);
            AssertEx.EqualTolerance(BoilerHorsepowerInOneWatt, watt.BoilerHorsepower, BoilerHorsepowerTolerance);
            AssertEx.EqualTolerance(BritishThermalUnitsPerHourInOneWatt, watt.BritishThermalUnitsPerHour, BritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(DecawattsInOneWatt, watt.Decawatts, DecawattsTolerance);
            AssertEx.EqualTolerance(DeciwattsInOneWatt, watt.Deciwatts, DeciwattsTolerance);
            AssertEx.EqualTolerance(ElectricalHorsepowerInOneWatt, watt.ElectricalHorsepower, ElectricalHorsepowerTolerance);
            AssertEx.EqualTolerance(FemtowattsInOneWatt, watt.Femtowatts, FemtowattsTolerance);
            AssertEx.EqualTolerance(GigajoulesPerHourInOneWatt, watt.GigajoulesPerHour, GigajoulesPerHourTolerance);
            AssertEx.EqualTolerance(GigawattsInOneWatt, watt.Gigawatts, GigawattsTolerance);
            AssertEx.EqualTolerance(HydraulicHorsepowerInOneWatt, watt.HydraulicHorsepower, HydraulicHorsepowerTolerance);
            AssertEx.EqualTolerance(JoulesPerHourInOneWatt, watt.JoulesPerHour, JoulesPerHourTolerance);
            AssertEx.EqualTolerance(KilobritishThermalUnitsPerHourInOneWatt, watt.KilobritishThermalUnitsPerHour, KilobritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(KilojoulesPerHourInOneWatt, watt.KilojoulesPerHour, KilojoulesPerHourTolerance);
            AssertEx.EqualTolerance(KilowattsInOneWatt, watt.Kilowatts, KilowattsTolerance);
            AssertEx.EqualTolerance(MechanicalHorsepowerInOneWatt, watt.MechanicalHorsepower, MechanicalHorsepowerTolerance);
            AssertEx.EqualTolerance(MegajoulesPerHourInOneWatt, watt.MegajoulesPerHour, MegajoulesPerHourTolerance);
            AssertEx.EqualTolerance(MegawattsInOneWatt, watt.Megawatts, MegawattsTolerance);
            AssertEx.EqualTolerance(MetricHorsepowerInOneWatt, watt.MetricHorsepower, MetricHorsepowerTolerance);
            AssertEx.EqualTolerance(MicrowattsInOneWatt, watt.Microwatts, MicrowattsTolerance);
            AssertEx.EqualTolerance(MillijoulesPerHourInOneWatt, watt.MillijoulesPerHour, MillijoulesPerHourTolerance);
            AssertEx.EqualTolerance(MilliwattsInOneWatt, watt.Milliwatts, MilliwattsTolerance);
            AssertEx.EqualTolerance(NanowattsInOneWatt, watt.Nanowatts, NanowattsTolerance);
            AssertEx.EqualTolerance(PetawattsInOneWatt, watt.Petawatts, PetawattsTolerance);
            AssertEx.EqualTolerance(PicowattsInOneWatt, watt.Picowatts, PicowattsTolerance);
            AssertEx.EqualTolerance(TerawattsInOneWatt, watt.Terawatts, TerawattsTolerance);
            AssertEx.EqualTolerance(WattsInOneWatt, watt.Watts, WattsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Power.From(1, PowerUnit.BoilerHorsepower);
            AssertEx.EqualTolerance(1, quantity00.BoilerHorsepower, BoilerHorsepowerTolerance);
            Assert.Equal(PowerUnit.BoilerHorsepower, quantity00.Unit);

            var quantity01 = Power.From(1, PowerUnit.BritishThermalUnitPerHour);
            AssertEx.EqualTolerance(1, quantity01.BritishThermalUnitsPerHour, BritishThermalUnitsPerHourTolerance);
            Assert.Equal(PowerUnit.BritishThermalUnitPerHour, quantity01.Unit);

            var quantity02 = Power.From(1, PowerUnit.Decawatt);
            AssertEx.EqualTolerance(1, quantity02.Decawatts, DecawattsTolerance);
            Assert.Equal(PowerUnit.Decawatt, quantity02.Unit);

            var quantity03 = Power.From(1, PowerUnit.Deciwatt);
            AssertEx.EqualTolerance(1, quantity03.Deciwatts, DeciwattsTolerance);
            Assert.Equal(PowerUnit.Deciwatt, quantity03.Unit);

            var quantity04 = Power.From(1, PowerUnit.ElectricalHorsepower);
            AssertEx.EqualTolerance(1, quantity04.ElectricalHorsepower, ElectricalHorsepowerTolerance);
            Assert.Equal(PowerUnit.ElectricalHorsepower, quantity04.Unit);

            var quantity05 = Power.From(1, PowerUnit.Femtowatt);
            AssertEx.EqualTolerance(1, quantity05.Femtowatts, FemtowattsTolerance);
            Assert.Equal(PowerUnit.Femtowatt, quantity05.Unit);

            var quantity06 = Power.From(1, PowerUnit.GigajoulePerHour);
            AssertEx.EqualTolerance(1, quantity06.GigajoulesPerHour, GigajoulesPerHourTolerance);
            Assert.Equal(PowerUnit.GigajoulePerHour, quantity06.Unit);

            var quantity07 = Power.From(1, PowerUnit.Gigawatt);
            AssertEx.EqualTolerance(1, quantity07.Gigawatts, GigawattsTolerance);
            Assert.Equal(PowerUnit.Gigawatt, quantity07.Unit);

            var quantity08 = Power.From(1, PowerUnit.HydraulicHorsepower);
            AssertEx.EqualTolerance(1, quantity08.HydraulicHorsepower, HydraulicHorsepowerTolerance);
            Assert.Equal(PowerUnit.HydraulicHorsepower, quantity08.Unit);

            var quantity09 = Power.From(1, PowerUnit.JoulePerHour);
            AssertEx.EqualTolerance(1, quantity09.JoulesPerHour, JoulesPerHourTolerance);
            Assert.Equal(PowerUnit.JoulePerHour, quantity09.Unit);

            var quantity10 = Power.From(1, PowerUnit.KilobritishThermalUnitPerHour);
            AssertEx.EqualTolerance(1, quantity10.KilobritishThermalUnitsPerHour, KilobritishThermalUnitsPerHourTolerance);
            Assert.Equal(PowerUnit.KilobritishThermalUnitPerHour, quantity10.Unit);

            var quantity11 = Power.From(1, PowerUnit.KilojoulePerHour);
            AssertEx.EqualTolerance(1, quantity11.KilojoulesPerHour, KilojoulesPerHourTolerance);
            Assert.Equal(PowerUnit.KilojoulePerHour, quantity11.Unit);

            var quantity12 = Power.From(1, PowerUnit.Kilowatt);
            AssertEx.EqualTolerance(1, quantity12.Kilowatts, KilowattsTolerance);
            Assert.Equal(PowerUnit.Kilowatt, quantity12.Unit);

            var quantity13 = Power.From(1, PowerUnit.MechanicalHorsepower);
            AssertEx.EqualTolerance(1, quantity13.MechanicalHorsepower, MechanicalHorsepowerTolerance);
            Assert.Equal(PowerUnit.MechanicalHorsepower, quantity13.Unit);

            var quantity14 = Power.From(1, PowerUnit.MegajoulePerHour);
            AssertEx.EqualTolerance(1, quantity14.MegajoulesPerHour, MegajoulesPerHourTolerance);
            Assert.Equal(PowerUnit.MegajoulePerHour, quantity14.Unit);

            var quantity15 = Power.From(1, PowerUnit.Megawatt);
            AssertEx.EqualTolerance(1, quantity15.Megawatts, MegawattsTolerance);
            Assert.Equal(PowerUnit.Megawatt, quantity15.Unit);

            var quantity16 = Power.From(1, PowerUnit.MetricHorsepower);
            AssertEx.EqualTolerance(1, quantity16.MetricHorsepower, MetricHorsepowerTolerance);
            Assert.Equal(PowerUnit.MetricHorsepower, quantity16.Unit);

            var quantity17 = Power.From(1, PowerUnit.Microwatt);
            AssertEx.EqualTolerance(1, quantity17.Microwatts, MicrowattsTolerance);
            Assert.Equal(PowerUnit.Microwatt, quantity17.Unit);

            var quantity18 = Power.From(1, PowerUnit.MillijoulePerHour);
            AssertEx.EqualTolerance(1, quantity18.MillijoulesPerHour, MillijoulesPerHourTolerance);
            Assert.Equal(PowerUnit.MillijoulePerHour, quantity18.Unit);

            var quantity19 = Power.From(1, PowerUnit.Milliwatt);
            AssertEx.EqualTolerance(1, quantity19.Milliwatts, MilliwattsTolerance);
            Assert.Equal(PowerUnit.Milliwatt, quantity19.Unit);

            var quantity20 = Power.From(1, PowerUnit.Nanowatt);
            AssertEx.EqualTolerance(1, quantity20.Nanowatts, NanowattsTolerance);
            Assert.Equal(PowerUnit.Nanowatt, quantity20.Unit);

            var quantity21 = Power.From(1, PowerUnit.Petawatt);
            AssertEx.EqualTolerance(1, quantity21.Petawatts, PetawattsTolerance);
            Assert.Equal(PowerUnit.Petawatt, quantity21.Unit);

            var quantity22 = Power.From(1, PowerUnit.Picowatt);
            AssertEx.EqualTolerance(1, quantity22.Picowatts, PicowattsTolerance);
            Assert.Equal(PowerUnit.Picowatt, quantity22.Unit);

            var quantity23 = Power.From(1, PowerUnit.Terawatt);
            AssertEx.EqualTolerance(1, quantity23.Terawatts, TerawattsTolerance);
            Assert.Equal(PowerUnit.Terawatt, quantity23.Unit);

            var quantity24 = Power.From(1, PowerUnit.Watt);
            AssertEx.EqualTolerance(1, quantity24.Watts, WattsTolerance);
            Assert.Equal(PowerUnit.Watt, quantity24.Unit);

        }

        [Fact]
        public void As()
        {
            var watt = Power.FromWatts(1);
            AssertEx.EqualTolerance(BoilerHorsepowerInOneWatt, watt.As(PowerUnit.BoilerHorsepower), BoilerHorsepowerTolerance);
            AssertEx.EqualTolerance(BritishThermalUnitsPerHourInOneWatt, watt.As(PowerUnit.BritishThermalUnitPerHour), BritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(DecawattsInOneWatt, watt.As(PowerUnit.Decawatt), DecawattsTolerance);
            AssertEx.EqualTolerance(DeciwattsInOneWatt, watt.As(PowerUnit.Deciwatt), DeciwattsTolerance);
            AssertEx.EqualTolerance(ElectricalHorsepowerInOneWatt, watt.As(PowerUnit.ElectricalHorsepower), ElectricalHorsepowerTolerance);
            AssertEx.EqualTolerance(FemtowattsInOneWatt, watt.As(PowerUnit.Femtowatt), FemtowattsTolerance);
            AssertEx.EqualTolerance(GigajoulesPerHourInOneWatt, watt.As(PowerUnit.GigajoulePerHour), GigajoulesPerHourTolerance);
            AssertEx.EqualTolerance(GigawattsInOneWatt, watt.As(PowerUnit.Gigawatt), GigawattsTolerance);
            AssertEx.EqualTolerance(HydraulicHorsepowerInOneWatt, watt.As(PowerUnit.HydraulicHorsepower), HydraulicHorsepowerTolerance);
            AssertEx.EqualTolerance(JoulesPerHourInOneWatt, watt.As(PowerUnit.JoulePerHour), JoulesPerHourTolerance);
            AssertEx.EqualTolerance(KilobritishThermalUnitsPerHourInOneWatt, watt.As(PowerUnit.KilobritishThermalUnitPerHour), KilobritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(KilojoulesPerHourInOneWatt, watt.As(PowerUnit.KilojoulePerHour), KilojoulesPerHourTolerance);
            AssertEx.EqualTolerance(KilowattsInOneWatt, watt.As(PowerUnit.Kilowatt), KilowattsTolerance);
            AssertEx.EqualTolerance(MechanicalHorsepowerInOneWatt, watt.As(PowerUnit.MechanicalHorsepower), MechanicalHorsepowerTolerance);
            AssertEx.EqualTolerance(MegajoulesPerHourInOneWatt, watt.As(PowerUnit.MegajoulePerHour), MegajoulesPerHourTolerance);
            AssertEx.EqualTolerance(MegawattsInOneWatt, watt.As(PowerUnit.Megawatt), MegawattsTolerance);
            AssertEx.EqualTolerance(MetricHorsepowerInOneWatt, watt.As(PowerUnit.MetricHorsepower), MetricHorsepowerTolerance);
            AssertEx.EqualTolerance(MicrowattsInOneWatt, watt.As(PowerUnit.Microwatt), MicrowattsTolerance);
            AssertEx.EqualTolerance(MillijoulesPerHourInOneWatt, watt.As(PowerUnit.MillijoulePerHour), MillijoulesPerHourTolerance);
            AssertEx.EqualTolerance(MilliwattsInOneWatt, watt.As(PowerUnit.Milliwatt), MilliwattsTolerance);
            AssertEx.EqualTolerance(NanowattsInOneWatt, watt.As(PowerUnit.Nanowatt), NanowattsTolerance);
            AssertEx.EqualTolerance(PetawattsInOneWatt, watt.As(PowerUnit.Petawatt), PetawattsTolerance);
            AssertEx.EqualTolerance(PicowattsInOneWatt, watt.As(PowerUnit.Picowatt), PicowattsTolerance);
            AssertEx.EqualTolerance(TerawattsInOneWatt, watt.As(PowerUnit.Terawatt), TerawattsTolerance);
            AssertEx.EqualTolerance(WattsInOneWatt, watt.As(PowerUnit.Watt), WattsTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Power(value: 1, unit: Power.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var watt = Power.FromWatts(1);

            var boilerhorsepowerQuantity = watt.ToUnit(PowerUnit.BoilerHorsepower);
            AssertEx.EqualTolerance(BoilerHorsepowerInOneWatt, (double)boilerhorsepowerQuantity.Value, BoilerHorsepowerTolerance);
            Assert.Equal(PowerUnit.BoilerHorsepower, boilerhorsepowerQuantity.Unit);

            var britishthermalunitperhourQuantity = watt.ToUnit(PowerUnit.BritishThermalUnitPerHour);
            AssertEx.EqualTolerance(BritishThermalUnitsPerHourInOneWatt, (double)britishthermalunitperhourQuantity.Value, BritishThermalUnitsPerHourTolerance);
            Assert.Equal(PowerUnit.BritishThermalUnitPerHour, britishthermalunitperhourQuantity.Unit);

            var decawattQuantity = watt.ToUnit(PowerUnit.Decawatt);
            AssertEx.EqualTolerance(DecawattsInOneWatt, (double)decawattQuantity.Value, DecawattsTolerance);
            Assert.Equal(PowerUnit.Decawatt, decawattQuantity.Unit);

            var deciwattQuantity = watt.ToUnit(PowerUnit.Deciwatt);
            AssertEx.EqualTolerance(DeciwattsInOneWatt, (double)deciwattQuantity.Value, DeciwattsTolerance);
            Assert.Equal(PowerUnit.Deciwatt, deciwattQuantity.Unit);

            var electricalhorsepowerQuantity = watt.ToUnit(PowerUnit.ElectricalHorsepower);
            AssertEx.EqualTolerance(ElectricalHorsepowerInOneWatt, (double)electricalhorsepowerQuantity.Value, ElectricalHorsepowerTolerance);
            Assert.Equal(PowerUnit.ElectricalHorsepower, electricalhorsepowerQuantity.Unit);

            var femtowattQuantity = watt.ToUnit(PowerUnit.Femtowatt);
            AssertEx.EqualTolerance(FemtowattsInOneWatt, (double)femtowattQuantity.Value, FemtowattsTolerance);
            Assert.Equal(PowerUnit.Femtowatt, femtowattQuantity.Unit);

            var gigajouleperhourQuantity = watt.ToUnit(PowerUnit.GigajoulePerHour);
            AssertEx.EqualTolerance(GigajoulesPerHourInOneWatt, (double)gigajouleperhourQuantity.Value, GigajoulesPerHourTolerance);
            Assert.Equal(PowerUnit.GigajoulePerHour, gigajouleperhourQuantity.Unit);

            var gigawattQuantity = watt.ToUnit(PowerUnit.Gigawatt);
            AssertEx.EqualTolerance(GigawattsInOneWatt, (double)gigawattQuantity.Value, GigawattsTolerance);
            Assert.Equal(PowerUnit.Gigawatt, gigawattQuantity.Unit);

            var hydraulichorsepowerQuantity = watt.ToUnit(PowerUnit.HydraulicHorsepower);
            AssertEx.EqualTolerance(HydraulicHorsepowerInOneWatt, (double)hydraulichorsepowerQuantity.Value, HydraulicHorsepowerTolerance);
            Assert.Equal(PowerUnit.HydraulicHorsepower, hydraulichorsepowerQuantity.Unit);

            var jouleperhourQuantity = watt.ToUnit(PowerUnit.JoulePerHour);
            AssertEx.EqualTolerance(JoulesPerHourInOneWatt, (double)jouleperhourQuantity.Value, JoulesPerHourTolerance);
            Assert.Equal(PowerUnit.JoulePerHour, jouleperhourQuantity.Unit);

            var kilobritishthermalunitperhourQuantity = watt.ToUnit(PowerUnit.KilobritishThermalUnitPerHour);
            AssertEx.EqualTolerance(KilobritishThermalUnitsPerHourInOneWatt, (double)kilobritishthermalunitperhourQuantity.Value, KilobritishThermalUnitsPerHourTolerance);
            Assert.Equal(PowerUnit.KilobritishThermalUnitPerHour, kilobritishthermalunitperhourQuantity.Unit);

            var kilojouleperhourQuantity = watt.ToUnit(PowerUnit.KilojoulePerHour);
            AssertEx.EqualTolerance(KilojoulesPerHourInOneWatt, (double)kilojouleperhourQuantity.Value, KilojoulesPerHourTolerance);
            Assert.Equal(PowerUnit.KilojoulePerHour, kilojouleperhourQuantity.Unit);

            var kilowattQuantity = watt.ToUnit(PowerUnit.Kilowatt);
            AssertEx.EqualTolerance(KilowattsInOneWatt, (double)kilowattQuantity.Value, KilowattsTolerance);
            Assert.Equal(PowerUnit.Kilowatt, kilowattQuantity.Unit);

            var mechanicalhorsepowerQuantity = watt.ToUnit(PowerUnit.MechanicalHorsepower);
            AssertEx.EqualTolerance(MechanicalHorsepowerInOneWatt, (double)mechanicalhorsepowerQuantity.Value, MechanicalHorsepowerTolerance);
            Assert.Equal(PowerUnit.MechanicalHorsepower, mechanicalhorsepowerQuantity.Unit);

            var megajouleperhourQuantity = watt.ToUnit(PowerUnit.MegajoulePerHour);
            AssertEx.EqualTolerance(MegajoulesPerHourInOneWatt, (double)megajouleperhourQuantity.Value, MegajoulesPerHourTolerance);
            Assert.Equal(PowerUnit.MegajoulePerHour, megajouleperhourQuantity.Unit);

            var megawattQuantity = watt.ToUnit(PowerUnit.Megawatt);
            AssertEx.EqualTolerance(MegawattsInOneWatt, (double)megawattQuantity.Value, MegawattsTolerance);
            Assert.Equal(PowerUnit.Megawatt, megawattQuantity.Unit);

            var metrichorsepowerQuantity = watt.ToUnit(PowerUnit.MetricHorsepower);
            AssertEx.EqualTolerance(MetricHorsepowerInOneWatt, (double)metrichorsepowerQuantity.Value, MetricHorsepowerTolerance);
            Assert.Equal(PowerUnit.MetricHorsepower, metrichorsepowerQuantity.Unit);

            var microwattQuantity = watt.ToUnit(PowerUnit.Microwatt);
            AssertEx.EqualTolerance(MicrowattsInOneWatt, (double)microwattQuantity.Value, MicrowattsTolerance);
            Assert.Equal(PowerUnit.Microwatt, microwattQuantity.Unit);

            var millijouleperhourQuantity = watt.ToUnit(PowerUnit.MillijoulePerHour);
            AssertEx.EqualTolerance(MillijoulesPerHourInOneWatt, (double)millijouleperhourQuantity.Value, MillijoulesPerHourTolerance);
            Assert.Equal(PowerUnit.MillijoulePerHour, millijouleperhourQuantity.Unit);

            var milliwattQuantity = watt.ToUnit(PowerUnit.Milliwatt);
            AssertEx.EqualTolerance(MilliwattsInOneWatt, (double)milliwattQuantity.Value, MilliwattsTolerance);
            Assert.Equal(PowerUnit.Milliwatt, milliwattQuantity.Unit);

            var nanowattQuantity = watt.ToUnit(PowerUnit.Nanowatt);
            AssertEx.EqualTolerance(NanowattsInOneWatt, (double)nanowattQuantity.Value, NanowattsTolerance);
            Assert.Equal(PowerUnit.Nanowatt, nanowattQuantity.Unit);

            var petawattQuantity = watt.ToUnit(PowerUnit.Petawatt);
            AssertEx.EqualTolerance(PetawattsInOneWatt, (double)petawattQuantity.Value, PetawattsTolerance);
            Assert.Equal(PowerUnit.Petawatt, petawattQuantity.Unit);

            var picowattQuantity = watt.ToUnit(PowerUnit.Picowatt);
            AssertEx.EqualTolerance(PicowattsInOneWatt, (double)picowattQuantity.Value, PicowattsTolerance);
            Assert.Equal(PowerUnit.Picowatt, picowattQuantity.Unit);

            var terawattQuantity = watt.ToUnit(PowerUnit.Terawatt);
            AssertEx.EqualTolerance(TerawattsInOneWatt, (double)terawattQuantity.Value, TerawattsTolerance);
            Assert.Equal(PowerUnit.Terawatt, terawattQuantity.Unit);

            var wattQuantity = watt.ToUnit(PowerUnit.Watt);
            AssertEx.EqualTolerance(WattsInOneWatt, (double)wattQuantity.Value, WattsTolerance);
            Assert.Equal(PowerUnit.Watt, wattQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = Power.FromWatts(1).ToBaseUnit();
            Assert.Equal(Power.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Power watt = Power.FromWatts(1);
            AssertEx.EqualTolerance(1, Power.FromBoilerHorsepower(watt.BoilerHorsepower).Watts, BoilerHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.FromBritishThermalUnitsPerHour(watt.BritishThermalUnitsPerHour).Watts, BritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromDecawatts(watt.Decawatts).Watts, DecawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromDeciwatts(watt.Deciwatts).Watts, DeciwattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromElectricalHorsepower(watt.ElectricalHorsepower).Watts, ElectricalHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.FromFemtowatts(watt.Femtowatts).Watts, FemtowattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromGigajoulesPerHour(watt.GigajoulesPerHour).Watts, GigajoulesPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromGigawatts(watt.Gigawatts).Watts, GigawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromHydraulicHorsepower(watt.HydraulicHorsepower).Watts, HydraulicHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.FromJoulesPerHour(watt.JoulesPerHour).Watts, JoulesPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromKilobritishThermalUnitsPerHour(watt.KilobritishThermalUnitsPerHour).Watts, KilobritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromKilojoulesPerHour(watt.KilojoulesPerHour).Watts, KilojoulesPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromKilowatts(watt.Kilowatts).Watts, KilowattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromMechanicalHorsepower(watt.MechanicalHorsepower).Watts, MechanicalHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.FromMegajoulesPerHour(watt.MegajoulesPerHour).Watts, MegajoulesPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromMegawatts(watt.Megawatts).Watts, MegawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromMetricHorsepower(watt.MetricHorsepower).Watts, MetricHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.FromMicrowatts(watt.Microwatts).Watts, MicrowattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromMillijoulesPerHour(watt.MillijoulesPerHour).Watts, MillijoulesPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromMilliwatts(watt.Milliwatts).Watts, MilliwattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromNanowatts(watt.Nanowatts).Watts, NanowattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromPetawatts(watt.Petawatts).Watts, PetawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromPicowatts(watt.Picowatts).Watts, PicowattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromTerawatts(watt.Terawatts).Watts, TerawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromWatts(watt.Watts).Watts, WattsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Power v = Power.FromWatts(1);
            AssertEx.EqualTolerance(-1, -v.Watts, WattsTolerance);
            AssertEx.EqualTolerance(2, (Power.FromWatts(3)-v).Watts, WattsTolerance);
            AssertEx.EqualTolerance(2, (v + v).Watts, WattsTolerance);
            AssertEx.EqualTolerance(10, (v*10).Watts, WattsTolerance);
            AssertEx.EqualTolerance(10, (10*v).Watts, WattsTolerance);
            AssertEx.EqualTolerance(2, (Power.FromWatts(10)/5).Watts, WattsTolerance);
            AssertEx.EqualTolerance(2, Power.FromWatts(10)/Power.FromWatts(5), WattsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Power oneWatt = Power.FromWatts(1);
            Power twoWatts = Power.FromWatts(2);

            Assert.True(oneWatt < twoWatts);
            Assert.True(oneWatt <= twoWatts);
            Assert.True(twoWatts > oneWatt);
            Assert.True(twoWatts >= oneWatt);

            Assert.False(oneWatt > twoWatts);
            Assert.False(oneWatt >= twoWatts);
            Assert.False(twoWatts < oneWatt);
            Assert.False(twoWatts <= oneWatt);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Power watt = Power.FromWatts(1);
            Assert.Equal(0, watt.CompareTo(watt));
            Assert.True(watt.CompareTo(Power.Zero) > 0);
            Assert.True(Power.Zero.CompareTo(watt) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Power watt = Power.FromWatts(1);
            Assert.Throws<ArgumentException>(() => watt.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Power watt = Power.FromWatts(1);
            Assert.Throws<ArgumentNullException>(() => watt.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Power.FromWatts(1);
            var b = Power.FromWatts(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = Power.FromWatts(1);
            var b = Power.FromWatts(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = Power.FromWatts(1);
            object b = Power.FromWatts(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Power.FromWatts(1);
            Assert.True(v.Equals(Power.FromWatts(1), WattsTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Power.Zero, WattsTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Power.FromWatts(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Power.FromWatts(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Power watt = Power.FromWatts(1);
            Assert.False(watt.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Power watt = Power.FromWatts(1);
            Assert.False(watt.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(PowerUnit.Undefined, Power.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(PowerUnit)).Cast<PowerUnit>();
            foreach(var unit in units)
            {
                if(unit == PowerUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Power.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 hp(S)", new Power(1, PowerUnit.BoilerHorsepower).ToString());
                Assert.Equal("1 Btu/h", new Power(1, PowerUnit.BritishThermalUnitPerHour).ToString());
                Assert.Equal("1 daW", new Power(1, PowerUnit.Decawatt).ToString());
                Assert.Equal("1 dW", new Power(1, PowerUnit.Deciwatt).ToString());
                Assert.Equal("1 hp(E)", new Power(1, PowerUnit.ElectricalHorsepower).ToString());
                Assert.Equal("1 fW", new Power(1, PowerUnit.Femtowatt).ToString());
                Assert.Equal("1 GJ/h", new Power(1, PowerUnit.GigajoulePerHour).ToString());
                Assert.Equal("1 GW", new Power(1, PowerUnit.Gigawatt).ToString());
                Assert.Equal("1 hp(H)", new Power(1, PowerUnit.HydraulicHorsepower).ToString());
                Assert.Equal("1 J/h", new Power(1, PowerUnit.JoulePerHour).ToString());
                Assert.Equal("1 kBtu/h", new Power(1, PowerUnit.KilobritishThermalUnitPerHour).ToString());
                Assert.Equal("1 kJ/h", new Power(1, PowerUnit.KilojoulePerHour).ToString());
                Assert.Equal("1 kW", new Power(1, PowerUnit.Kilowatt).ToString());
                Assert.Equal("1 hp(I)", new Power(1, PowerUnit.MechanicalHorsepower).ToString());
                Assert.Equal("1 MJ/h", new Power(1, PowerUnit.MegajoulePerHour).ToString());
                Assert.Equal("1 MW", new Power(1, PowerUnit.Megawatt).ToString());
                Assert.Equal("1 hp(M)", new Power(1, PowerUnit.MetricHorsepower).ToString());
                Assert.Equal("1 µW", new Power(1, PowerUnit.Microwatt).ToString());
                Assert.Equal("1 mJ/h", new Power(1, PowerUnit.MillijoulePerHour).ToString());
                Assert.Equal("1 mW", new Power(1, PowerUnit.Milliwatt).ToString());
                Assert.Equal("1 nW", new Power(1, PowerUnit.Nanowatt).ToString());
                Assert.Equal("1 PW", new Power(1, PowerUnit.Petawatt).ToString());
                Assert.Equal("1 pW", new Power(1, PowerUnit.Picowatt).ToString());
                Assert.Equal("1 TW", new Power(1, PowerUnit.Terawatt).ToString());
                Assert.Equal("1 W", new Power(1, PowerUnit.Watt).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 hp(S)", new Power(1, PowerUnit.BoilerHorsepower).ToString(swedishCulture));
            Assert.Equal("1 Btu/h", new Power(1, PowerUnit.BritishThermalUnitPerHour).ToString(swedishCulture));
            Assert.Equal("1 daW", new Power(1, PowerUnit.Decawatt).ToString(swedishCulture));
            Assert.Equal("1 dW", new Power(1, PowerUnit.Deciwatt).ToString(swedishCulture));
            Assert.Equal("1 hp(E)", new Power(1, PowerUnit.ElectricalHorsepower).ToString(swedishCulture));
            Assert.Equal("1 fW", new Power(1, PowerUnit.Femtowatt).ToString(swedishCulture));
            Assert.Equal("1 GJ/h", new Power(1, PowerUnit.GigajoulePerHour).ToString(swedishCulture));
            Assert.Equal("1 GW", new Power(1, PowerUnit.Gigawatt).ToString(swedishCulture));
            Assert.Equal("1 hp(H)", new Power(1, PowerUnit.HydraulicHorsepower).ToString(swedishCulture));
            Assert.Equal("1 J/h", new Power(1, PowerUnit.JoulePerHour).ToString(swedishCulture));
            Assert.Equal("1 kBtu/h", new Power(1, PowerUnit.KilobritishThermalUnitPerHour).ToString(swedishCulture));
            Assert.Equal("1 kJ/h", new Power(1, PowerUnit.KilojoulePerHour).ToString(swedishCulture));
            Assert.Equal("1 kW", new Power(1, PowerUnit.Kilowatt).ToString(swedishCulture));
            Assert.Equal("1 hp(I)", new Power(1, PowerUnit.MechanicalHorsepower).ToString(swedishCulture));
            Assert.Equal("1 MJ/h", new Power(1, PowerUnit.MegajoulePerHour).ToString(swedishCulture));
            Assert.Equal("1 MW", new Power(1, PowerUnit.Megawatt).ToString(swedishCulture));
            Assert.Equal("1 hp(M)", new Power(1, PowerUnit.MetricHorsepower).ToString(swedishCulture));
            Assert.Equal("1 µW", new Power(1, PowerUnit.Microwatt).ToString(swedishCulture));
            Assert.Equal("1 mJ/h", new Power(1, PowerUnit.MillijoulePerHour).ToString(swedishCulture));
            Assert.Equal("1 mW", new Power(1, PowerUnit.Milliwatt).ToString(swedishCulture));
            Assert.Equal("1 nW", new Power(1, PowerUnit.Nanowatt).ToString(swedishCulture));
            Assert.Equal("1 PW", new Power(1, PowerUnit.Petawatt).ToString(swedishCulture));
            Assert.Equal("1 pW", new Power(1, PowerUnit.Picowatt).ToString(swedishCulture));
            Assert.Equal("1 TW", new Power(1, PowerUnit.Terawatt).ToString(swedishCulture));
            Assert.Equal("1 W", new Power(1, PowerUnit.Watt).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 W", new Power(0.123456m, PowerUnit.Watt).ToString("s1"));
                Assert.Equal("0.12 W", new Power(0.123456m, PowerUnit.Watt).ToString("s2"));
                Assert.Equal("0.123 W", new Power(0.123456m, PowerUnit.Watt).ToString("s3"));
                Assert.Equal("0.1235 W", new Power(0.123456m, PowerUnit.Watt).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 W", new Power(0.123456m, PowerUnit.Watt).ToString("s1", culture));
            Assert.Equal("0.12 W", new Power(0.123456m, PowerUnit.Watt).ToString("s2", culture));
            Assert.Equal("0.123 W", new Power(0.123456m, PowerUnit.Watt).ToString("s3", culture));
            Assert.Equal("0.1235 W", new Power(0.123456m, PowerUnit.Watt).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Power)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(PowerUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(QuantityType.Power, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(Power.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(Power.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(new {Power.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Power.FromWatts(value);
            Assert.Equal(Power.FromWatts(-value), -quantity);
        }
    }
}
